<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-scrum-1/">https://mdecd2025.github.io/hw-scrum-1/</a>  </p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-scrum-1">https://github.com/mdecd2025/hw-scrum-1</a> </p>
<p>Solvespace: <a href="https://solvespace.com">https://solvespace.com</a></p>
<p>Onshape: <a href="https://onshape.com">https://onshape.com</a> 學員帳號使用 50703199 At mde</p>
<p>Webots: <a href="https://cyberbotics.com/">https://cyberbotics.com/</a></p>
<p>AI: <a href="https://grok.com/">https://grok.com/</a> </p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h2>AI</h2>
<p></p>
<h2>Server</h2>
<p>35 - 5j - win10 - Intel(R) Xeon(R) E-2236 CPU @ 3.40GHz   3.41 GHz</p>
<p>cd2025     8446</p>
<p>cdhw        8445</p>
<p>wcm2025 8444</p>
<p>wcmhw    8443</p>
<p>1000 - E5200 - win10 - Pentium(R) Dual-Core CPU E5200 @ 2.50GHz</p>
<p>9001 - 91 - 9089 - ubuntu - Intel(R) Xeon(R) Silver 4208 CPU @ 2.10GHz</p>
<p>9002 - 91 - 9089 - win10 - Intel(R) Xeon(R) Silver 4208 CPU @ 2.10GHz</p>
<h1>Tasks</h1>
<p>task1 與 task2 任務目的在建立可於近端維護個人作業與協同作業的準備工作:</p>
<p style="padding-left: 30px;">task1 (自行製作可攜程式系統)</p>
<p style="padding-left: 30px;">task2 (使用 SSH 協定執行作業倉儲的推送)</p>
<p>task3 與 task4 則為 HW2 的內容之一</p>
<p style="padding-left: 30px;">task3 (使用 Solvespace 建立平面四連桿系統零組件)</p>
<p style="padding-left: 30px;">task4 (使用 Onshape 建立平面四連桿系統零組件)</p>
<p>task5 與 task6 則為 HW3 的主要內容</p>
<p style="padding-left: 30px;">task5 (Webots Tutorial 1 ~3)</p>
<p style="padding-left: 30px;">task6 (Webots Tutorial 4 ~6)</p>
<p></p>
<h2>Wink</h2>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 假如檔案小於 5mb, 將 mp4 檔案放入 downloads 目錄後取出 --&gt;
&lt;div class="winkVideoContainerClass"&gt;&lt;video width="1008" height="630" autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="your_video_unique_name" muted="true"&gt;
&lt;source src="/downloads/your_video.mp4" type="video/mp4" /&gt;&lt;/video&gt;&lt;/div&gt;</pre>
<div>自行建立可攜 Python 的過程畫面:</div>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="cdw3_python1" height="630" muted="true" width="1008">
<source src="/downloads/wink/cdw3_python1.mp4" type="video/mp4"/></video></div>
<p>使用 SSH 執行 git clone 與 git push 的過程畫面:</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="cdw3_ssh1" height="630" muted="true" width="1008">
<source src="/downloads/wink/cdw3_ssh1.mp4" type="video/mp4"/></video></div>
<p>設定可攜套件 .gitconfig 的過程畫面:</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="cdw3_gitconfig" height="630" muted="true" width="1008">
<source src="/downloads/wink/cdw3_gitconfig.mp4" type="video/mp4"/></video></div>
<p>solvespace 零組件繪圖過程畫面:</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="cdw3_cad" height="630" muted="true" width="1008">
<source src="/downloads/wink/cdw3_cad.mp4" type="video/mp4"/></video></div>
<h3>IPv6</h3>
<p>已知 w4 之前的學員作業倉儲版本, 無法在 IPv6 位址設定時正確運作, 各學員必須下載 <a href="http://229.cycu.org/cmsimde_w4.7z">cmsimde_w4.7z</a>, 解開壓縮檔案後, 替換倉儲中的 cmsimde 目錄.</p>
<p>IPv6 設定:</p>
<p style="padding-left: 30px;">2a 各學員固定 IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:a001<br/>2b 各學員固定 IPv6 分配: 2001:288:6004:17:fff1:cd25:0000:b001<br/>gateway: 2001:288:6004:17::254<br/>dns server: <br/>2001:288:6004:17::3<br/>2001:b000:168::1</p>
<p>2a 以 <a href="/downloads/w4_2a_index.txt">w4_2a_index.txt</a> 中的序號為準, 例如: 序號為 1 的學員其固定 IPv6 位址為:</p>
<p style="padding-left: 30px;"><span>2001:288:6004:17:fff1:cd25:0000:a001</span></p>
<p style="padding-left: 30px;"><span>若序號為 60 其 IPv6 位址為 2001:288:6004:17:fff1:cd25:0000:a060</span></p>
<p>2b 以 <a href="/downloads/w4_2b_index.txt">w4_2b_index.txt</a> 中的序號為準, 例如: 序號為 1 的學員其固定 IPv6 位址為:</p>
<p style="padding-left: 30px;"><span>2001:288:6004:17:fff1:cd25:0000:b001</span></p>
<p style="padding-left: 30px;"><span>若序號為 66 其 IPv6 位址為 2001:288:6004:17:fff1:cd25:0000:b066</span></p>
<p>註: 利用 Brython <a href="https://mde.tw/wcm2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/5299aa53dc856df47c98993e016c9c0db2c74edf/2025_spring_set_mde_dns.py">產生</a> DNS 伺服器所需的設定.</p>
<p>完成 dns 設定之後:</p>
<p style="padding-left: 30px;">2a 序號為 1 的學員其伺服器主機符號名稱為 a1.mde.nfu.edu.tw, 序號 50 則對應 a50.</p>
<p style="padding-left: 30px;">2b 序號為 1 的學員其伺服器主機符號名稱為 b1.mde.nfu.edu.tw, 序號 50 則對應 b50.</p>
<hr/>
<p>各組員將電腦設為所份配的固定 IPv6 後, 可以利用 python -m http.server, 在作業倉儲中啟動 port 8000 的 http 靜態網頁伺服器, 以下為各班的近端學員靜態網站連結:</p>
<p><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2a_group.py">列出 2a 分組網站與倉儲連結</a></p>
<p><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<p>2a IPv6 port 8000 連線列表</p>
<p><a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/48af059c96052719dc03d5fe8ee8af9a6033afc7/w4_2b_ipv6_stud_num.py">2b IPv6 port 8000 連線列表</a> (<a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/35707a62977b9829179159ffd34140d600ef8158/w4_2b_ipv6_task3.py">列出無法連線學員</a>)</p>
<hr/>
<p>以下為與 AI 系統的對話:</p>
<p>請用 Brython 寫出在 id="brython_div1" 嵌入 html 連結的程式. 希望各連結能透過 http 協定連結到班上有 66 位學員的靜態網頁. 其中各學員的固定 IPv6 分別為 2001:288:6004:17:fff1:cd25:0000:b001 到 2001:288:6004:17:fff1:cd25:0000:b066, 且使用 port 8000 進行連結. 請寫出此一 Brython 程式.</p>
<p>取得下列程式: <a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/5674eb19769159d503b2263726279dc4e7f26c1f/w4_2b_ipv6.py">透過 2b 學員序號列出其 IPv6 靜態網站</a></p>
<p>完成上述以序號標示後, 透過下列詢問可以取得以學號作為標示的各學員近端靜態網站連結.</p>
<p style="padding-left: 30px;">任務一: 請用 Brython 寫出在 id="brython_div1" 嵌入 html 連結的程式. 希望各連結能透過 http 協定連結到班上有 66 位學員的靜態網頁. 其中各學員的固定 IPv6 分別為 2001:288:6004:17:fff1:cd25:0000:b001 到 2001:288:6004:17:fff1:cd25:0000:b066, 且使用 port 8000 進行連結. 請寫出此一 Brython 程式.</p>
<p style="padding-left: 30px;">任務二: 若各學員序號取自 https://mde.tw/cd2025/downloads/w4_2b_index.txt, 且此一資料以空白隔開序號加"." 及學號, 能否修改成以學員的學號作為 html 的標示.</p>
<p style="padding-left: 30px;">任務三: 完成各學員的 html 連結後, 請再用 Brython 程式設法進入每一位學員的網站查驗, 是否可以讀取到該連結 content 目錄中的 About.html, 若可以則 pass, 若無法連結則列出無法完成連結的學員學號.</p>
<p style="padding-left: 30px;">請分別列出上述三個任務的程式碼.</p>
<h3>Fossil</h3>
<p>Fossil server 與 Git 倉儲結合可以提供協同者參與 Forum 討論, 且在不登入情況下 <a href="https://rocket.cycu.org/cdhw/forum">view Forum</a>.</p>
<p style="padding-left: 30px;">權限設定如下:</p>
<p style="padding-left: 30px;">Forum     /forum       {@2 3 4 5 6}   {}</p>
<p>demo 倉儲與 <a href="https://rocket.cycu.org/cdhw">https://rocket.cycu.org/cdhw</a> 內容同步</p>
<p>經由 proxy server 執行 fossil clone:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">set http_proxy=http://p4.cycu.org:3128

set https_proxy=http://p4.cycu.org:3128

fossil clone https://username@server.name/fossilname fossilname.fossil</pre>
<p>Fossil SCM 的應用</p>
<p><a href="https://fossil-scm.org/">https://fossil-scm.org/</a> </p>
<p>Github 與 Fossil SCM 結合應用範例:</p>
<div class="winkVideoContainerClass"><video autoplay="autoplay" class="winkVideoClass" controls="controls" data-dirname="/cmsimde/static" data-varname="wcmw3_fossil1" height="630" muted="true" width="1008">
<source src="/downloads/wink/wcmw3_fossil1.mp4" type="video/mp4"/></video></div>
<p>Github 與 Fossil 內容整合:</p>
<p><a href="https://rocket.cycu.org/cdhw/forumpost/61c86299c9">https://rocket.cycu.org/cdhw/forumpost/61c86299c9</a></p><h2>task1</h2>
<h4>自行製作可攜程式系統</h4>
<p>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.</p>
<p>以下為操作步驟:</p>
<ol>
<li>下載 <a href="http://229.cycu.org/portable_python311.7z">portable_python311.7z</a>, 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境.</li>
<li>雙點擊 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE 中開啟 Y:\<a href="/downloads/gen_python313.py">gen_python313.py</a>, 以下拉式功能表 Tools - Go 執行, 便可在 Y:\ 建立 Python313 目錄.</li>
<li>接著修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat.</li>
<li>接下來以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具.</li>
<li>在命令列中, 以 python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成.</li>
<li>最後在命令列中, 以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲.</li>
<li>之後利用新版的 <a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a>, <a href="https://git-scm.com/downloads/win">Portablegit</a>, <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>, <a href="https://github.com/ShareX/ShareX/releases">ShareX</a>, <a href="https://www.debugmode.com/wink.html">Wink</a>, <a href="https://solvespace.com/download.pl">Solvespace</a>, <a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/zoomit">Zoomit</a>, <a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/process-explorer#download">ProcessExplorer</a> 以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動.</li>
</ol>
<p>以下為操作影片:</p>
<p></p>
<h3>list</h3>
<p>以下將要嘗試利用程式方法列出學員的作業倉儲與網頁連結, 以及各分組的倉儲及網站連結.</p>
<p>已知的兩段程式 (<a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/2793a8a65bd810e9837e0d00ca3e2105d3d5da9c/list_stage_1.py">1</a>, <a href="https://mde.tw/cd2025/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/2793a8a65bd810e9837e0d00ca3e2105d3d5da9c/list_stage_2.py">2</a>), 可以讀取 <a href="https://mde.tw/list/2b.txt">https://mde.tw/list/2b.txt</a> (<a href="https://github.com/mdecycu/list">https://github.com/mdecycu/list</a>), 並且各學員的學號與　Github 帳號是利用 Tab 隔開.</p>
<p>過程中若學員 Github 帳號有更動, 可以透過 Pull Requests 要求修改.</p>
<p>以下可直接列出:</p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/113a3d7e19b36a7672a136f3731ef07b095adeef/list_2a.py">列出 2a 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2a_group.py">列出 2a 分組網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<p>目前 cmsimde 使用 Brython 3.12.3, 嘗試更新為 3.12.4 以上版本時, 發現在靜態網頁會與 template chimper 中的 jquery 版本內容衝突, 導致無法從 URL 取下 gist 的 Brython 程式內容.</p>
<p>之後可以測試採用 Brython 3.13.2 最新版本, 但在動態與靜態網頁執行 Brython 程式時, 可以將原始碼放入 html 頁面, 並利用 Button 直接進行存取. 可以從 <a href="https://github.com/mdecycu/cmsimde_site">https://github.com/mdecycu/cmsimde_site</a> 建立 Branch 進行測試.</p>
<p>題外:</p>
<p><a href="https://software.nfu.edu.tw/Office/tw/Office_Pro_Plus_2016_64Ch.iso">下載 Office 2016.iso</a><span>, 與 </span><a href="https://software.nfu.edu.tw/KMS/Office_2016_KMS.bat">2016_office_kms.bat</a> from <a href="https://2019wcm.blogspot.com">https://2019wcm.blogspot.com</a> </p>
<p>問題: 41223144 納入 b 班 g3?? 在 w4 進行移除!</p>
<h2>task2</h2>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a> 是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟:</p>
<p>第一步:</p>
<p style="padding-left: 30px;">若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\putty\plink.exe).</p>
<p>第二步:</p>
<p style="padding-left: 30px;">指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中.</p>
<p>第三步:</p>
<p style="padding-left: 30px;">利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk)</p>
<p>第四步:</p>
<p style="padding-left: 30px;">接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\.</p>
<p>第五步:</p>
<p style="padding-left: 30px;">接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com.</p>
<p>第六步:</p>
<p style="padding-left: 30px;">接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫.</p>
<p>第七步:</p>
<p style="padding-left: 30px;">在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在.</p>
<p>第八步:</p>
<p style="padding-left: 30px;">上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push.</p>
<p>第九步:</p>
<p style="padding-left: 30px;">由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\ 的位置.</p>
<p>第十步:</p>
<p style="padding-left: 30px;">若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名.</p>
<p>第十一步:</p>
<p style="padding-left: 30px;">由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中.</p>
<p>使用 PuTTY session 設定倉儲 .git/config 中的 URL</p>
<p>假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[remote "origin"]
    url = git@mysession:mdecd2025/hw-scrum-1.git
    fetch = +refs/heads/:refs/remotes/origin/</pre>
<p>其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號.</p>
<p>url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域.</p>
<h3>w3</h3>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/113a3d7e19b36a7672a136f3731ef07b095adeef/list_2a.py">列出 2a 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/29173e8b73ad422fd7c44bcd93658a3579d63633/list_stage_3.py">列出 2b 學員作業網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2a_group.py">列出 2a 分組網站與倉儲連結</a></p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/a4414e311503fac8d57d4f5e44999147c54cf7fa/list_2b_group.py">列出 2b 分組網站與倉儲連結</a></p>
<hr/>
<p>請列出各班目前尚未納入分組的學員名單.</p>
<p>透過下列程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import os
# pip install pygithub
from github import Github
# the following is under IPv6
# Replace these variables with your own details
GITHUB_TOKEN = 'your_token'
ORG_NAME = 'mdecd2025'
PROXY = 'http://p4.cycu.org:3128'

def get_all_team_members_starting_with_a(org_name, token, proxy):
    # Set proxy environment variables
    os.environ['http_proxy'] = proxy
    os.environ['https_proxy'] = proxy

    # Initialize Github object
    g = Github(token)
    all_members = []

    try:
        # Get organization
        org = g.get_organization(org_name)
        
        # Get all teams
        teams = org.get_teams()
        
        for team in teams:
            if team.name.lower().startswith('g'):
                print(f"Processing team: {team.name}")
                # List members
                members = team.get_members()
                for member in members:
                    all_members.append(member.login)
                    print(f"Login: {member.login}, ID: {member.id}, URL: {member.html_url}")
                    
        print("\nAll members:", all_members)
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    get_all_team_members_starting_with_a(ORG_NAME, GITHUB_TOKEN, PROXY)</pre>
<p>已知各班已經參與分組的學員 Github 帳號分別如下:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">a_all_members = ['41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119']
b_all_members = ['41223251', '41223211', '41223245', '41223243', 'jjjay41223212', 'leeshaowei0716', '41223234', '41223209', '41223205', '41223201', '41223202', '41223208-hw', '41223216', '41223217', '41223248', 'emma0312', '41223242', '41223203', '41223144', '41223235', 'RAY41223215', 'hyy41223228', '41223227', '41223206', '41223226-0', 'Cloud41223237', 'Yujenchuang', '41223225', 'ljg41223220', 'supowen', 'jacky93111', '41223246', 'Liu41223244', '41223236', '41223219', '41271237', '41223249', '41223229', '41223224', '41223222', '41223231', 'linryan23', '41023114', '41223230', 'timluo123', 'CYC41223247', '41223218', 'ych0227', '41023215', '41023216', '41023213', '41071203', '41071204', '41071202', 'c-ching', 'YUN4', 'tseYU000', 'snowfall-killer', 'junpig10']</pre>
<p>請接著列出目前各班尚未納組的學員學號.</p>
<p>首先看能否從 list\2a.txt <a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/8443979d03961d3f66e99e65f4ab3639b3567891/list_2a_stud_num_and_github.py">讀出學員的學號與 github 帳號</a>:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 建立 url 變數與網站中 2a 學員的學號與帳號資料 URL 網誌字串對應
url = "https://mde.tw/list/2a.txt"
# 利用 open() 物件中的 readlines() 方法, 取出網站中的資料並逐行放入數列中, 因此 data 的資料型別為數列
data = open(url).readlines()
# 進行資料查驗時, 印出 data 數列內容
#print(data)
# 因為學員資料中的第一列為標題, 因此有效資料從索引值 1 開始
all_stud = data[1:]
# 確定已經取得 2a.txt 中的學號與 github 帳號資料
#print(all_stud)
# 利用 for 迴圈逐一列出各學員的單行資料
# 已知各行資料是以 \n 跳行, 可以設法先刪除每一筆資料最後的跳行符號
for i in all_stud:
    #print(i)
    drop_n = i.rstrip("\n")
    # 確定每一行最後的跳行符號已經移除
    #print(drop_n, end="")
    # 設法利用學號與帳號間的 "\t" 將資料隔開
    stud = drop_n.split("\t")
    #print(stud)
    stud_num = stud[0]
    stud_github = stud[1]
    print("學號為 ", stud_num, " 的學員, 其 Github 帳號為 ", stud[1])</pre>
<p>只要在迴圈中加入下列判斷式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#print("學號為 ", stud_num, " 的學員, 其 Github 帳號為 ", stud[1])
if stud_github not in a_all_members:
    print(stud_num)</pre>
<p>即可取得下列尚未納組的學員學號:</p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/1ef87e0d43210f34d48ea6559a6a74d075d6a253/2a_not_in_group.py">2a</a>:</p>
<p>41023220<br/>41223111<br/>41223119<br/>41223124<br/>41223148</p>
<p><a href="https://mdecd2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/addb4810bed04a15b77e94720cf7de231f380591/2b_not_in_group.py">2b</a>:</p>
<p>40923137<br/>41023237<br/>41223210<br/>41223214<br/>41223223<br/>41223232<br/>41223233<br/>41223239<br/>41223245<br/>41271217<br/>41271236</p>
<p></p>
<p></p>
<h2>task3</h2>
<h4>使用 Solvespace 建立平面四連桿系統零組件 (HW2)</h4>
<p><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<h2>task4</h2>
<p>原先想法:</p>
<p style="padding-left: 30px;">因為隨後可以透過比對取得尚未納組的學員 Github 帳號, 且必須設法從其 Github 帳號, 取得其對應學號, 因此若能從上列程式設法建立一個 Dict, 支援輸入 Github  帳號可以回覆其對應學號, 就可以順利找出目前尚未納組的學員學號. 另外是否也必須查驗是否有學員加入錯誤的班級組別?</p>
<p>實際解法:</p>
<p style="padding-left: 30px;">因為上列程式已經給出兩班當時已經參與分組的學員 Github 帳號, 因此只需要從 <a href="https://mde.tw/list/2b.txt">https://mde.tw/list/2b.txt</a> 讀取學員的學號與 Github 帳號, 並且在 for 迴圈中, 逐一用學員的 Github 帳號相對於各班已經參與分組的學員 Github 帳號, 並且列出特定學員的 Github 帳號不在前述已經參與分組的學員帳號數列中, 即可列出截至當時尚未那組的學員學號.</p>
<h3>w4</h3>
<p>已知目前的學員作業倉儲無法在 IPv6 位址設定時正確運作, 各學員必須下載 <a href="http://229.cycu.org/cmsimde_w4.7z">cmsimde_w4.7z</a>, 解開壓縮檔案後, 替換倉儲中的 cmsimde 目錄.</p>
<p>開始建立 Webots 模擬場景: <a href="https://github.com/mdecycu/cd2025/discussions/2">w4 開始的練習</a></p>
<p><span style="background-color: #ffff99;">為什麼建立 Webots 場景需要先建立 Robot 物件?</span></p>
<p style="padding-left: 30px;">在 Webots 中，建立場景時需要先建立一個 Robot 物件的原因，與 Webots 的模擬架構和工作原理密切相關。以下是詳細解釋：</p>
<p style="padding-left: 30px;"><br/>1. Webots 的核心設計理念<br/><br/>Webots 是一個用於模擬機器人行為的平台，它的場景（world）是由多個物件（nodes）組成的樹狀結構。而 Robot 物件是一個特殊的節點（node），它不僅代表一個實體機器人，還承載了與模擬環境交互的核心功能，例如感測器、執行器和控制器。沒有 Robot 物件，場景就缺少一個主體來執行具體的任務或行為，模擬也就失去了意義。</p>
<p style="padding-left: 30px;">2. Robot 物件的功能<br/><br/>    控制器綁定：每個 Robot 物件都需要指定一個控制器（controller），這是用來定義機器人行為的程式（可以用 C、C++、Python 等語言編寫）。沒有 Robot，就無法運行控制器，也無法模擬機器人的動作或決策。<br/>    感測器與執行器：Robot 物件是感測器（例如攝影機、距離感測器）和執行器（例如馬達、輪子）的容器。這些設備必須依附於一個 Robot 節點才能運作。<br/>    物理屬性：Robot 物件定義了機器人在模擬環境中的物理存在，例如位置、質量和形狀。如果沒有這個物件，場景中就沒有可以與物理引擎交互的實體。<br/><br/>3. 場景的結構要求<br/><br/>在 Webots 中，場景檔案（.wbt 檔案）是一個層次化的描述，所有的節點都必須遵循一定的語法規則。Robot 節點通常作為場景中的頂層節點之一，直接或間接連接到根節點（World）。如果沒有 Robot，場景可能只包含靜態物件（例如牆壁或地板），但無法進行動態模擬，因為缺少能夠主動參與模擬的實體。</p>
<p style="padding-left: 30px;">4. 實際操作中的必要性<br/><br/>當你建立一個 Webots 場景時，通常的目的是模擬某個機器人的行為（例如移動、避障、抓取物品等）。因此，第一步通常是定義一個 Robot 物件，然後在這個物件下添加必要的子節點（例如 DifferentialWheels、感測器等），以實現模擬目標。換句話說，Robot 是場景的起點，沒有它，後續的配置就無從談起。</p>
<p style="padding-left: 30px;">總結<br/><br/>建立 Webots 場景需要先建立 Robot 物件，因為它是模擬的核心實體，承載了控制器、感測器、執行器和物理屬性等功能。沒有 Robot，場景就只是一個靜態的環境，無法實現動態的機器人模擬。這是 Webots 設計上的基本要求，也是模擬流程的邏輯起點。</p>
<p><span style="background-color: #ffff99;">Webots 在建立連桿機構模型時, 是否無法建立 closed chain 機構的 kinematics 模型, 只能建立 dynamic model?</span></p>
<p style="padding-left: 30px;">在 Webots 中，建立連桿機構模型時，的確有一些限制。Webots 是一個仿真軟體，主要用於機器人和機械系統的動態仿真，並且使用的模型大多是基於動態模型（dynamic models）來進行運算和仿真。對於一個閉環機構（closed-chain mechanism），Webots 不提供直接建立其運動學（kinematics）模型的工具或算法。</p>
<p style="padding-left: 30px;">1. 關於閉環機構的幾點說明：<br/><br/>    運動學（Kinematics）是描述機構運動的幾何學模型，通常關注的是位置、速度和加速度等。<br/>    動力學（Dynamics）則是考慮外力、慣性、摩擦等物理因素，描述機構在運動過程中的力學行為。<br/><br/>2. Webots 中的模型類型：<br/><br/>    Webots 主要依賴動力學模型來處理仿真，這些模型包括力學運算、質量、慣性矩等。在處理一個閉環機構（例如機械手臂中帶有閉環結構的部分）時，Webots 更加強調的是系統的運動學和動力學的結合，並通過數值積分來解決動態方程，而不是像一些其他專門的運動學求解軟體（如 MATLAB、Adams 等）一樣單獨進行運動學建模。<br/><br/>3. 關於閉環機構的仿真：<br/><br/>    當建立閉環機構模型時，Webots 並不直接提供基於閉環運動學的求解器。相反，Webots 會通過動態模型，並將閉環運動的約束作為力學條件來進行處理。因此，它會基於質量、力和慣性等動態特徵來解算運動。<br/>    若需要精確的運動學建模，可以考慮在外部工具中（如 MATLAB、Simulink 或 ROS）進行運動學建模，再將結果導入到 Webots 進行動態仿真。<br/><br/>總結：<br/><br/>Webots 在處理閉環機構時，主要側重於動力學模型的建立，而不是運動學模型。它能夠處理閉環結構的動態行為，但不直接提供基於運動學的閉環求解。對於複雜的運動學分析，可能需要借助其他專業工具來處理，然後將結果匯入 Webots 進行仿真。</p>
<p data-pm-slice="1 1 []"><span style="background-color: #ffff99;">請就此點與 CoppeliaSim 建模進行比較</span></p>
<p>在建模閉環機構（closed-chain mechanism）時，<strong>CoppeliaSim</strong>（原名 V-REP）和 <strong>Webots</strong> 之間的區別主要體現在它們對運動學（kinematics）和動力學（dynamics）的處理方式上。</p>
<h4><strong>Webots 的建模特點：</strong></h4>
<ol>
<li>
<p><strong>動力學為主</strong>：</p>
<ul>
<li>Webots 強調的是機構的動力學模型，通過質量、慣性矩、力學約束等來描述機構的運動。當處理閉環機構時，Webots 並不直接提供運動學的求解過程，而是依賴動力學來解決運動方程。</li>
<li>它的仿真是基於數值積分的動態仿真，並且處理的是物理層面上的相互作用，這意味著它更多地側重於如何模擬機構的動力學行為（如速度、加速度、力等）而非僅僅描述機構的幾何運動。</li>
<li>在設計複雜的閉環機構時，通常需要考慮機構的運動限制，這些限制會作為力學約束條件（例如接觸力、摩擦力、鉸鏈等）納入動力學模型中來進行仿真。</li>
</ul>
</li>
<li>
<p><strong>閉環機構的動態仿真</strong>：</p>
<ul>
<li>Webots 不能直接生成閉環機構的運動學模型（例如雅可比矩陣、運動方程），但它可以處理這些機構的動力學模型並通過數值方法解算運動。閉環機構的運動限制通常會通過編程或物理約束來處理。</li>
</ul>
</li>
</ol>
<h4><strong>CoppeliaSim 的建模特點：</strong></h4>
<ol>
<li>
<p><strong>強調運動學與動力學結合</strong>：</p>
<ul>
<li>CoppeliaSim 在處理閉環機構時，與 Webots 類似，主要處理的是機構的<strong>動力學仿真</strong>，但它同時也具備更強大的<strong>運動學分析功能</strong>。它支持基於機構運動學的建模，並且能夠生成雅可比矩陣、運動學方程等。</li>
<li>在 CoppeliaSim 中，可以直接利用其內建的運動學求解器來處理複雜的運動學問題（例如多自由度機械手臂、閉環機構等），這使得它能夠提供精確的運動學分析，並且可以基於這些分析結果進行動態仿真。</li>
</ul>
</li>
<li>
<p><strong>運動學建模和約束處理</strong>：</p>
<ul>
<li>CoppeliaSim 允許在機構建模過程中使用<strong>運動學約束</strong>來定義閉環結構。這意味著，使用者可以明確地定義機構的各個部件如何運動、約束其位置、速度等，甚至可以設置關節限制、碰撞檢測等。這些運動學約束和幾何關係被用來確保機構在仿真過程中遵循合理的運動軌跡。</li>
<li>CoppeliaSim 提供了許多現成的機構建模元件，如彈簧、齒輪、連桿等，並支持用戶自定義機構和關節的運動學約束。</li>
</ul>
</li>
<li>
<p><strong>更多的控制和交互性</strong>：</p>
<ul>
<li>CoppeliaSim 提供了豐富的控制接口，並支持與外部系統進行聯動（如 ROS、Python 等）。這使得用戶可以實現對閉環機構的控制，並將控制策略與運動學和動力學仿真結合起來。</li>
<li>它也提供了反向運動學（Inverse Kinematics, IK）解算器，對於機械手臂等應用，能夠簡化運動學的建模過程。</li>
</ul>
</li>
</ol>
<h4><strong>總結比較：</strong></h4>
<table>
<thead>
<tr>
<th>特性</th>
<th><strong>Webots</strong></th>
<th><strong>CoppeliaSim</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>建模重點</strong></td>
<td>動力學仿真為主，基於物理規則計算運動</td>
<td>結合運動學與動力學，提供更高層次的建模功能</td>
</tr>
<tr>
<td><strong>運動學分析</strong></td>
<td>不直接處理運動學，基於動力學解算運動</td>
<td>提供運動學求解器，支持雅可比矩陣和運動方程</td>
</tr>
<tr>
<td><strong>閉環機構處理</strong></td>
<td>需要通過物理約束來實現</td>
<td>可通過運動學約束和動力學約束建模閉環機構</td>
</tr>
<tr>
<td><strong>運動學求解器</strong></td>
<td>不提供運動學求解器</td>
<td>提供運動學求解器，支持反向運動學解算</td>
</tr>
<tr>
<td><strong>開發與控制接口</strong></td>
<td>支持與外部控制系統連接（如 ROS）</td>
<td>支持多種控制接口，易於與外部系統集成</td>
</tr>
<tr>
<td><strong>易用性與功能豐富度</strong></td>
<td>偏向於動力學仿真，適合模擬機器人運動</td>
<td>提供完整的運動學和動力學建模，適合精細建模</td>
</tr>
</tbody>
</table>
<h4>結論：</h4>
<ul>
<li>如果你專注於<strong>動態仿真</strong>，並且希望更強調機構的物理交互，<strong>Webots</strong> 是一個很好的選擇。</li>
<li>如果你需要一個結合<strong>運動學與動力學</strong>的工具，並且希望進行更精細的機構建模，<strong>CoppeliaSim</strong> 提供了更多的功能來處理閉環機構的運動學約束和動力學行為。它對於處理複雜的運動學問題（例如逆運動學）以及閉環機構的建模可能更加靈活。</li>
</ul>
<p>因此，選擇哪個平台取決於你的具體需求，如果你需要較高層次的運動學建模，CoppeliaSim 可能更適合；如果重點在於機構的動態仿真和控制，Webots 可能是更好的選擇。</p>
<p style="padding-left: 30px;"></p>
<h4>使用 Onshape 建立平面四連桿系統零組件 (HW2)</h4>
<p>連桿尺寸依據: <a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<h3>w5</h3>
<p>內容一:</p>
<p style="padding-left: 30px;">cadlab 網路設定範例: <a href="/downloads/account_network_setup.7z">account_network_setup.7z</a></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/6YMViZXpRKQ?si=PnEYgChikbUxf5XA" title="YouTube video player" width="560"></iframe></p>
<p>內容二:</p>
<p dir="auto">接下來, 我們將說明如何在 Webots 中利用簡單的 box 物件建立 link, 利用 HingeJoint 建立 旋轉軸, 並且利用 Python controller 程式控制 link 的旋轉, 以下的模擬場景為可分別針對 link1, link2, link3 控制旋轉的 Open chain 運動模型, 請各組接續完成 Closed chain 的 box 四連桿運動場景. 完成後請詳細說明各連接桿與連接軸的設定步驟, 將說明以及操作影片分別放入個人與分組的倉儲及網頁中.</p>
<p dir="auto" style="padding-left: 30px;"><a href="/downloads/cd2025_box_fourbar.zip">cd2025_box_fourbar.zip</a></p>
<p dir="auto">平面四連桿的尺寸設計: 固定桿長度為 1m, 主動旋轉桿長度為 0.4m, 第二旋轉桿長度為 0.6m, 第三旋轉桿長度為 0.9m.</p>
<p dir="auto">工具: Webots R2025a, Solvespace 3.1, Python 3.13.2, 可攜程式環境 wcm2025</p>
<p dir="auto">希望完成的模擬結果如下:</p>
<p dir="auto"><img alt="" height="349" src="/images/w5_box_fourbar.gif" width="400"/></p>
<p dir="auto"><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a> </p>
<h4 dir="auto">What is Webots?</h4>
<p style="padding-left: 30px;">Webots is a professional mobile robot simulation software package. It offers a rapid prototyping environment, that allows the user to create 3D virtual worlds with physics properties such as mass, joints, friction coefficients, etc.</p>
<p style="padding-left: 30px;">The user can add simple passive objects or active objects called mobile robots. These robots can have different locomotion schemes (wheeled robots, legged robots, or flying robots). Moreover, they may be equipped with a number of sensor and actuator devices, such as distance sensors, drive wheels, cameras, motors, touch sensors, emitters, receivers, etc.</p>
<p style="padding-left: 30px;">Finally, the user can program each robot individually to exhibit the desired behavior. Webots contains a large number of robot models and controller program examples to help users get started.</p>
<p style="padding-left: 30px;">Webots also contains a number of interfaces to real mobile robots, so that once your simulated robot behaves as expected, you can transfer its control program to a real robot like e-puck, DARwIn-OP, Nao, etc. Adding new interfaces is possible through the related system.</p>
<h4>Webots Simulation:</h4>
<p style="padding-left: 30px;">A Webots simulation is composed of following items:</p>
<p style="padding-left: 30px;">A Webots world file (.wbt) that defines one or several robots and their environment. The .wbt file does sometimes depend on external PROTO files (.proto) and textures.</p>
<p style="padding-left: 30px;">One or several controller programs for the above robots (in C/C++/Java/Python/MATLAB).</p>
<p style="padding-left: 30px;">An optional physics plugin that can be used to modify Webots regular physics behavior (in C/C++).</p>
<h4>What is a world?</h4>
<p style="padding-left: 30px;">A world, in Webots, is a 3D description of the properties of robots and of their environment. It contains a description of every object: position, orientation, geometry, appearance (like color or brightness), physical properties, type of object, etc.</p>
<p style="padding-left: 30px;">Worlds are organized as hierarchical structures where objects can contain other objects (like in VRML97).</p>
<p style="padding-left: 30px;">For example, a robot can contain two wheels, a distance sensor and a joint which itself contains a camera, etc.</p>
<p style="padding-left: 30px;">A world file doesn't contain the controller code of the robots; it only specifies the name of the controller that is required for each robot. Worlds are saved in ".wbt" files. The ".wbt" files are stored in the "worlds" subdirectory of each Webots project.</p>
<h4>What is a Controller?</h4>
<p style="padding-left: 30px;">A controller is a computer program that controls a robot specified in a world file.</p>
<p style="padding-left: 30px;">Controllers can be written in any of the programming languages supported by Webots: C, C++, Java, Python or MATLAB.</p>
<p style="padding-left: 30px;">When a simulation starts, Webots launches the specified controllers, each as a separate process, and it associates the controller processes with the simulated robots.</p>
<p style="padding-left: 30px;">Note that several robots can use the same controller code, however a distinct process will be launched for each robot.</p>
<p style="padding-left: 30px;">Some programming languages need to be compiled (C and C++) other languages need to be interpreted (Python and MATLAB) and some need to be both compiled and interpreted (Java).</p>
<p style="padding-left: 30px;">For example, C and C++ controllers are compiled to platform-dependent binary executables (for example ".exe" under Windows).</p>
<p style="padding-left: 30px;">Python and MATLAB controllers are interpreted by the corresponding run-time systems (which must be installed).</p>
<p style="padding-left: 30px;">Java controller need to be compiled to byte code (".class" files or ".jar") and then interpreted by a Java Virtual Machine.</p>
<p style="padding-left: 30px;">The source files and binary files of each controller are stored together in a controller directory. A controller directory is placed in the "controllers" subdirectory of each Webots project.</p>
<h4>What is a Supervisor Controller?</h4>
<p style="padding-left: 30px;">The Supervisor controller is the controller of a Robot whose supervisor field is set to TRUE, it can execute operations that can normally only be carried out by a human operator and not by a real robot.</p>
<p style="padding-left: 30px;">The Supervisor controller can be written in any of the above mentioned programming languages. However, in contrast with a regular Robot controller, the Supervisor controller will have access to privileged operations. The privileged operations include simulation control, for example, moving the robots to a random position, making a video capture of the simulation, etc.</p>
<h4>Starting Webots:</h4>
<p>start.bat contains setup for Webots:</p>
<p style="padding-left: 30px;">REM for Webots<br/>set PYTHON_PATH=%Disk%:\<span style="background-color: #ffff00;">Python313</span></p>
<p style="padding-left: 30px;">REM for webots<br/>set <span style="background-color: #ffff00;">path_webots</span>=%Disk%:\<span style="background-color: #ffff00;">Webots_2025a</span>\msys64\mingw64\bin;%Disk%:\Webots_2025a\msys64\usr\bin</p>
<p style="padding-left: 30px;">path=%Disk%:;%path_python%;%path_git%;%path_copsim%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_postgresql%;%path_range%;%path_lua%;%path_core%;%path_putty%;%path_vscode%;%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;%path_scite%;%path_xsltproc%;%path_gnuplot%;%path_openssl%;%path_poppler%;<span style="background-color: #ffff00;">%path_webots%</span>;%path_blender%;%path%;</p>
<p style="padding-left: 30px;">Therefore, under portable system dos windows, key in "webotsw" to start Webots.</p>
<h4>User Interface:</h4>
<p style="padding-left: 30px;"><a href="https://cyberbotics.com/doc/guide/the-user-interface">https://cyberbotics.com/doc/guide/the-user-interface</a> </p>
<p><a href="/downloads/w5_boomer.7z">w5_boomer.7z</a></p>
<p><a href="/downloads/fourbar_box.7z">fourbar_box.7z</a></p>
<p>1.</p>
<p><img alt="" height="222" src="/images/webots_w5_1.png" width="231"/></p>
<p>2.</p>
<p><img alt="" height="367" src="/images/webots_w5_2.png" width="245"/></p>
<p>3.</p>
<p><img alt="" height="270" src="/images/webots_w5_3.png" width="253"/></p>
<p>4.</p>
<p><img alt="" height="322" src="/images/webots_w5_4.png" width="800"/></p>
<p>5.</p>
<p><img alt="" height="470" src="/images/webots_w5_5.png" width="363"/></p>
<p>6.</p>
<p><img alt="" height="332" src="/images/webots_w5_6.png" width="800"/></p>
<p>7.</p>
<p><img alt="" height="389" src="/images/webots_w5_7.png" width="800"/></p>
<p>8.</p>
<p><img alt="" height="331" src="/images/webots_w5_8.png" width="295"/></p>
<p>對 link1 施以 Torque 的 box 四連桿模擬場景與控制程式: <a href="/downloads/cd2025_box_fourbar_w5.7z">cd2025_box_fourbar_w5.7z</a></p>
<p><a href="/downloads/fourbar_box_w5.7z">fourbar_box_w5.7z</a></p>
<h3>w6</h3>
<p><a href="/downloads/basket_ball_shooter.7z">basket_ball_shooter.7z</a></p>
<p><a href="/downloads/basket_ball_shooter_w7.7z">basket_ball_shooter_w7.7z</a></p>
<p><img alt="" height="395" src="/images/w7_solvespace_shooter_mechanism.png" width="400"/></p>
<p><a href="/downloads/tutorial5.7z">tutorial5.7z</a></p>
<p>以下為利用多個 Shape 以 Group 組合為一個 boundingObject 複合外形, 以作為後續碰撞檢測用. 相關架構如下:</p>
<p><img alt="" height="686" src="/images/tutorial5_compound_group.png" width="400"/></p>
<hr/>
<p><span style="background-color: #ffff00;">請注意, 所有 world 的存檔必須要將模擬時間轉為 0</span>, 否則所存的變數狀態將為該時間的模擬結果.</p>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python">Tutorial 1</a> 重點摘要:</p>
<p>將 <a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> 解開壓縮後放入可攜套件 (<a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a>) 的 data 目錄中.</p>
<p>因為 start.bat 中已經宣告 Python 所在位置, 並將執行 webotsw.exe 所在的目錄放入 Windows 的命令搜尋路徑變數中 (path).</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for Webots
set PYTHON_PATH=%Disk%:\Python313

REM for webots
set  path_webots=%Disk%:\Webots_2025a\msys64\mingw64\bin;%Disk%:\Webots_2025a\msys64\usr\bin</pre>
<p>當起始一個 Webots project, 需要至少建立 worlds、controllers、protos 等三個目錄, 而且 Robot 的<span style="background-color: #ffff00;">控制器程式必須放入 controllers 目錄, 且控制程式檔名必須與子目錄相同</span>.</p>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment?tab-language=python">Tutorial 2</a> 重點摘要:</p>
<p><img alt="" height="329" src="/images/simplest_rigit_body_object.png" width="400"/></p>
<p>根據上圖, 在 <span style="background-color: #ffff00;">Webots 建立剛體物件, 必須使用 Solid 節點, 並從節點中的 children 建立 Shape 後宣告其 geometry 外形用於系統的運動方程式, 而其碰撞檢測的外形依據, 則從 Solid 節點的 boundingObject 中的 geometry 進行確認</span>.</p>
<p>另外可從 View - Optional Rendering - Show coordinate system 選項, 要求系統列出目前視圖所依據的座標系統.</p>
<p>當在 base 物件建立旋轉軸時, HingeJoint 物件的位階必須與 base 相同, 而且 link1 的 solid 物件必須接在 HingeJoint 的 endPoint 節點上, 且因為 link1 的最後位置並非位於其旋轉中心, 因此在建立 link1 solid 物件下的 shape 之前必須先使用 pose 物件, 以便在 solid 的 parent 座標系統之下, 建立一個屬於 shape 的局部座標轉換系統.</p>
<p>另外 HingeJoint 的旋轉中心位置是由 jointParameters 物件下的 anchor 欄位決定, 而其旋轉軸則由 axis 欄位決定.</p>
<p>由於 link1 最後需要透過碰撞檢測來與籃球互動, 因此除了 dynamic simulation 之外, 還需要設定 boundingObject, 才能界定 link1 的碰撞幾何外形, 但由於前面的 link1 並非在其 parent 座標系統的物件中心旋轉, 而是透過其局部座標轉換 (利用 pose 物件達成), 往局部 x 方向移動 0.2m, 因此 boundingObject 在引用其 shape 時, 也必須透過 pose 轉換到 link1 最終所在位置.</p>
<p><span>上列流程所完成的 Webots 專案檔: </span><a href="https://localhost:9448/downloads/w6_demo_project.7z">w6_demo_project.7z</a> (joint on link1)</p>
<p><a href="/downloads/w6_joint_on_base_project.7z">w6_joint_on_base_project.7z</a> (joint on base)</p>
<p></p>
<p></p><h2>task5</h2>
<h4>Webots Tutorial 1 ~3 (HW3)</h4>
<p><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a></p>
<ol>
<li>請用繁體中文詳細說明下列資料: <a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots </a></li>
<li>請整理 <a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a> 中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</li>
<li>請摘要出下列內容: (放入英文文章內容)</li>
<li>請列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</li>
<li>請詳細說明如何採手動方式在 Webots 建立下列場景:</li>
<li>希望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</li>
</ol>
<h3>w7</h3>
<p>先下載 <a href="https://mde.tw/cd2025/downloads/fourbar_box.7z">fourbar_box.7z</a>, 以便作為建立模擬場景的參考.</p>
<p>啟動可攜套件中的 Webots:</p>
<p>start.bat 中已經安排以下的設定:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">REM for Webots
set PYTHON_PATH=%Disk%:\Python313

REM for webots
set  path_webots=%Disk%:\Webots_2025a\msys64\mingw64\bin;%Disk%:\Webots_2025a\msys64\usr\bin

path=%Disk%:;%path_python%;%path_git%;%path_copsim%;%path_msys2%;%path_miketex%;%path_flutter%;%path_node%;%path_tcc%;%path_postgresql%;%path_range%;%path_lua%;%path_core%;%path_putty%;%path_vscode%;%RUST_PATH%;%path_erlang%;%path_nodejs%;%path_haskell%;%path_scite%;%path_xsltproc%;%path_gnuplot%;%path_openssl%;%path_poppler%;%path_webots%;%path_blender%;%path%;</pre>
<p>只要 Webots_2025a 位於可攜套件的 data 目錄下, 啟動可攜系統之後就可輸入 webotsw 開啟套件.</p>
<p>建立 fourbar box 過程中的要點:</p>
<ol>
<li>各 Solid - Shape - geometry 在建立 open chain 機構時, 可以在尚未設定 physics 之前單軸運轉, 但 Webots 牽涉需要模擬 closed chain 機構時, 各 Solid - Shape -geometry 則必須設定 boundingObject 與 physics 才能透過 solidReference 進行 dynamics 聯立運算. 亦即 Webots 在模擬封閉機構時, 只能處理 Dynamics 模擬, 原因是其模擬運算是從 <a href="https://www.ode.org/">ODE</a> 動力程式庫修改而來, 並沒有附加 closed chain 的 kinematics 運算.</li>
<li>當個別 link 採 box 建立時, 為了要符合其 kinematics 運動約束條件, 各桿件的起始條件必須滿足 fourbar linkage 的約束條件, 因此只有 link1 旋轉 90 度, 可以在 x 與 y 軸同動的情況下無需透 pose 進行局部座標轉換, 但 link2 與 link3 在納入 Shape 之前必須立 pose 節點置入額外的座標轉換.</li>
<li>各 link 的 boundingObject 欄位, 可以透過其 link Shape 採 USE 的方式重用.</li>
<li>最後 joint4 的旋轉中心則透過 solidReference 與 link3 的端點座標重合, 才能完成 closed chain 的動力約束條件模擬.</li>
<li>所完成的 fourbar box 運動場景: <a href="/downloads/w7_2b_fourbar_box.7z">w7_2b_fourbar_box.7z</a></li>
</ol>
<p><img alt="" height="300" src="/images/fourbar_shooter.gif" width="400"/></p>
<p><a href="/downloads/fourbar_shooter_w7.7z">fourbar_shooter_w7.7z</a></p>
<p><a href="/downloads/fourbar_shooter_w7-2.7z">fourbar_shooter_w7-2.7z</a></p><h3>w8</h3>
<p>根據 <a href="https://cyberbotics.com/doc/reference/solidreference">SolidReference</a> 節點的用法說明, SolidReference 可以用在 Joint 節點的 endPoint 欄位中，用來指向一個現有的 Solid 或靜態環境 &lt;static environment&gt;。通過這種方式，可以閉合機械迴圈。</p>
<p>當指向一個 Solid 時，唯一的限制是 Solid 和 Joint 必須是某個共同上層 Solid 的後代。</p>
<p>意思即, SolidReference 是一個引用類型，允許在 Joint 節點的 endPoint 欄位中指定某個目標。它可以指向兩種類型的對象：</p>
<ol>
<li>現有的 Solid：這是一個具體的實體（例如某個機械零件或組件），但這個 Solid 和 Joint 必須是某個共同上層 Solid 的後代。</li>
<li>靜態環境 &lt;static environment&gt;：這通常指的是不動的參考框架（例如地面或固定基座）。</li>
</ol>
<p>根據第一個情況，若將 fourbar linkage 的 joint4 設置在 base link 的最右端，然後將 joint4 的 endPoint 欄位，設為 SolidReference 指向 link3，即可符合 Soild (link3) 與 Joint (joint4) 都是某個共同上層 Solid (base) 的後代。</p>
<p>至於第二個情況，則可以將 fourbar linkage 的 joint4 設置在 link3 的末端，然後將 joint4 的 endPoint 欄位指向 &lt;static environment&gt;，讓 link3 的末端固定在 ground (其作用與固定在 base 節點相同)。</p>
<p>fourbar box 四連桿機構:</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2025/downloads/fourbar_box.7z">fourbar_box.7z</a> 的 <a href="https://cyberbotics.com/doc/reference/solidreference">SolidReference</a> 採用第一種作法，joint4 位於 base link，然後參照指向 link3。</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cd2025/downloads/fourbar_box_w8.7z">fourbar_box_w8.7z</a> (將 joint4 接在 link3 末端，然後 <a href="https://cyberbotics.com/doc/reference/solidreference">SolidReference</a> 參照到內定的 &lt;static environment&gt;， 表示將 link3 末端的 joint4 直接固定在 base 上 (固定點)。</p>
<p>fourbar solvespace 四連桿機構:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a> 採用第一種作法。</p><h3>Blender</h3>
<p><a href="https://docs.blender.org/manual/en/latest">Blender Manual</a> (<a href="https://vagon.io/blog/complete-guide-to-blender-3d-for-beginners#history-and-evolution-of-blender-3d">Reference</a>)</p>
<p><a href="/downloads/camp_blender.pdf">camp_blender.pdf</a></p>
<p>Add - Mesh - UV Sphere</p>
<p>select + S - scale object</p>
<p>select + G - move object</p>
<p>select + Material property - Viewport display - change object color</p>
<p>按住滑鼠中鍵後移動 - rotate</p>
<p>Shift + 按住滑鼠中鍵後移動 - pan</p>
<p><a href="https://christiansamek.at/play/blender-shortcuts-hotkeys/">Blender Hot keys</a> (<a href="/downloads/blender-4-shortcuts-hotkeys.pdf">blender-4-shortcuts-hotkeys.pdf</a>)</p>
<p></p><h3>Webots</h3>
<h4>具有網頁介面的開源3D機器人模擬器</h4>
<h4>專案概述</h4>
<p></p>
<p>一家瑞士公司正在開發一個現實的機器人模擬器，可用於模擬涉及移動機器人、機器人手臂、無人機、自主車輛、工業過程等的數字雙胞胎場景。該軟體是開源的，基於桌面並具有基於雲的3D網頁介面。</p>
<h4>專案目標</h4>
<p>該模擬器可建模傳感器和執行器（如攝像頭、激光雷達、激光測距儀等），並允許機器人由處理傳感器數據的 AI算 法控制。</p>
<h4>詳細描述</h4>
<p>該中小企業開發了 Webots 軟體，一個開源的多平台桌面應用，用於模擬機器人。它提供了一個完整的開發環境來建模、編程和模擬機器人。Webots 用於工業、教育和研究，並自 1998 年以來一直維護。該軟體最初由瑞士洛桑聯邦理工學院（EPFL）開發。</p>
<p>Webots 支持創建機器人原型、開發、測試和驗證 AI 和控制算法，以及教學機器人學。用戶可以使用 Webots 的資產庫設計模擬，導入 CAD 模型，並使用 OpenStreetMap 地圖。</p>
<p>圖形用戶介面支持編輯模擬和機器人控制器，節省開發時間。用戶可以創建各種機器人和環境的模擬，包括室內和室外。數字雙胞胎模型允許在模擬中測試改進，然後在真實系統中實施，提升溝通、探索和開發效率。</p>
<h4>技術信息</h4>
<p>Webots 結合了圖形用戶介面（基於 Qt 庫）、物理引擎（基於 Open Dynamics Engine 的分支）和 3D 渲染引擎（OpenGL 3.3）。它運行於 Windows、Linux 和 macOS。模擬可以導出為電影、互動 HTML 場景、動畫，甚至在線流式傳輸。機器人可以使用 C、C++、Python、Java、MATLAB 或 ROS 編程，使用簡單的 API 覆蓋所有基本的機器人需求。</p>
<p>網頁介面位於 <a href="https://webots.cloud">Webots Cloud</a>，允許在雲中運行模擬、播放 3D 動畫並展示場景和物體。</p>
<h4>優勢與創新</h4>
<ul>
<li>高質量的免費開源技術，用於模擬機器人系統。</li>
<li>輕鬆導出模擬、3D 動畫和模型，以便與其他人分享。</li>
<li>來自瑞士中小企業的專家支持，並提供定制開發服務。</li>
<li>利用 Webots 用戶社區的貢獻，包括機器人、傳感器、執行器、物體、環境、基準測試、控制程序等模型。</li>
<li>通過 <a href="https://webots.cloud/competition">Webots Cloud Competition</a> 輕鬆組織機器人挑戰和編程競賽。</li>
</ul>
<p><a href="/downloads/Analysis_exploring_risks_and_opportunities_linked_to_the_use_of_collaborative_industrial_robots_in_Europ.pdf">Analysis_exploring_risks_and_opportunities_linked_to_the_use_of_collaborative_industrial_robots_in_Europ.pdf</a></p>
<p>Webots project: <a href="https://www.rosin-project.eu/ftp/ros2-for-the-e-puck2-robot">https://www.rosin-project.eu/ftp/ros2-for-the-e-puck2-robot</a> </p><h3>Deepbots</h3>
<h4><a href="https://link.springer.com/chapter/10.1007/978-3-030-49186-4_6">Deepbots: A Webots-Based Deep Reinforcement Learning Framework for Robotics</a></h4>
<h4>概要</h4>
<p>Deepbots 是一個開源框架，結合了 <a href="https://github.com/openai/gym">OpenAI Gym</a> 介面和 Webots 機器人模擬器，以標準化方式在各種機器人場景中應用深度強化學習（DRL）。該框架旨在減少開發工作量，讓研究人員能夠輕鬆地在 Webots 中開發 DRL 方法。本文通過代碼示例和三個難度不同的案例展示了該框架的有效性。</p>
<h4>主要貢獻</h4>
<ul>
<li>提供一個易於使用的 DRL 介面，結合 OpenAI Gym 和 Webots。</li>
<li>簡化了 DRL 方法的開發，處理了低層細節。</li>
<li>提供即用型標準化環境和額外的監控工具（如 tensorboard 日誌和繪圖）。</li>
</ul>
<h4>重要特點</h4>
<ul>
<li><strong>Webots</strong>: 專業的 3D 機器人模擬器，支持多種機器人和傳感器。</li>
<li><strong>OpenAI Gym</strong>: 標準化的 DRL 介面，提供經典的 agent-environment 循環。</li>
<li><strong>Deepbots 框架</strong>: 作為 Webots 和 DRL 算法之間的中介，提供多層次的抽象和高代碼可讀性及可重用性。</li>
</ul>
<h4>相關工作</h4>
<ul>
<li><strong>OpenAI Gym</strong>: 標準化 RL 測試環境，但僅限於簡單、不現實的場景。</li>
<li><strong>Gazebo</strong>: 另一個流行的機器人模擬器，但圖形質量較低。</li>
<li><strong>Isaac Gym</strong>: 提供照片真實渲染和平行處理，但為閉源軟件。</li>
</ul>
<h4>Deepbots 架構</h4>
<ul>
<li><strong>Supervisor Controller</strong>: 監督者控制器，負責從環境中獲取觀察並與 agent 交流。</li>
<li><strong>Robot Controller</strong>: 機器人控制器，負責從傳感器讀取數據並執行動作。</li>
<li><strong>通信機制</strong>: 使用發射器和接收器進行消息傳遞。</li>
</ul>
<h4>案例環境</h4>
<ol>
<li><strong>CartPole</strong>: 維持倒立擺垂直，使用 <a href="https://arxiv.org/abs/1707.06347">PPO 算法</a>。</li>
<li><strong>Pit Escape</strong>: BB-8 機器人從坑中逃脫，使用 <a href="https://arxiv.org/abs/1707.06347">PPO 算法</a>。</li>
<li><strong>Find the Ball and Avoid Obstacles</strong>: E-puck 機器人找到目標並避開障礙物，使用 <a href="https://www.sciencedirect.com/science/article/pii/S2405844024067288">DDPG 算法</a>。</li>
</ol>
<h4>結論</h4>
<p>Deepbots 為想在高保真模擬器 Webots 中應用 RL 和 DRL 的研究人員提供了一個標準化的方法，適用於多種研究和教育用途。</p>
<h4>參考文獻</h4>
<p>提供了一系列相關文獻和資源鏈接，包括 OpenAI Gym、Gazebo、Isaac Gym 等。</p>
<p>Deepbots 框架的源代碼和更多信息可在 <a href="https://github.com/aidudezzz/deepbots">GitHub</a> 上找到。</p>
<h2>task6</h2>
<h4>Webots Tutorial 4 ~6 (HW3)</h4>
<p>Webots 啟動時，同時啟動串流伺服器指令: webotsw --stream</p>
<p>內建埠號為 1234，由於採用 WebGL2 進行網頁著色，因此在 Windows 環境中使用 Edge 連線至 <a href="http://localhost:1234">http://localhost:1234</a> 或 <a href="http://stream_server_ip:1234">http://stream_server_ip:1234</a> 將會較為順暢.</p>
<p>至於希望利用 display 展示投籃成績的方法，僅能在近端 Webots 套件中檢視，因此若要讓記分板或計時器能在串流瀏覽器中展示，必須採用 7 段顯示器設置，並利用 supervisor 模式進行操控.</p>
<p>利用 Solvespace 繪製的 7 段顯示器零組件檔案: <a href="/downloads/score_counter.7z">score_counter.7z</a></p>
<p>若要在 Webots 中利用變顏色的 .obj 零件顯示數字, 可以透過 Solid - Shape - Mesh 然後將 url 指向 7 段顯示器中的 a ~ g 零件, 並且利用 controller 改變各零件的顏色.</p>
<p>利用 r, b, y, g 按鍵改變 7 段顯示器中的 f 零件示範場景: <a href="/downloads/7_segment_display.7z">7_segment_display.7z</a>, 執行結果如下:</p>
<p><img alt="" height="328" src="/images/solid_shape_mesh_color_changed.gif" width="400"/></p>
<p><a href="/downloads/three_digit_counter.7z">three_digit_counter.7z</a></p>
<p></p>
<h3>Since w10</h3>
<p>截至目前已知:</p>
<p style="padding-left: 30px;">1. 最新的可攜程式系統與套件版本:</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/portable_wcm2025_w10.7z">portable_wcm2025_w10.7z</a></p>
<p style="padding-left: 30px;">2. 已知如何自行建立各種版本的 Python 可攜系統:</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/content/Portable.html">https://mde.tw/cd2025/content/Portable.html</a> </p>
<p style="padding-left: 30px;">3. 已知哪一個版本 SciTE 較為穩定:</p>
<p style="padding-left: 60px;"><span>請更新上列 portable_wcm2025.7z 中的 wscite 為 5.5.5 版 (</span><a href="http://229.cycu.org/wscite_5.5.5.7z">wscite_5.5.5.7z</a><span>, 解開壓縮檔案後取代 5.5.4 版的 wscite 目錄)</span></p>
<p style="padding-left: 30px;">4. 已知如何使用 Codespaces 管理個人與協同分組的倉儲:</p>
<p style="padding-left: 60px;">./init_replit (處理 codespaces 上的 python 模組, 令其可執行 python main.py 與 python main2.py)</p>
<p style="padding-left: 30px;">5. 已知可以透過 token 或 Github session 管理管理個人與協同分組的倉儲:</p>
<p style="padding-left: 60px;">.git/config 中 url 將 token 放入即可取得權限 (透過 https)</p>
<p style="padding-left: 60px;">利用 puttygen.exe 建立 keys, 然後以 session 取得維護倉儲的權限.</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/content/SSH.html">https://mde.tw/cd2025/content/SSH.html</a> </p>
<p style="padding-left: 30px;">6. 已知哪一個版本的 Webots 較為穩定:</p>
<p style="padding-left: 60px;"><span>備註: 已知 Webots 2025a 有不少 bugs, 其中包括操作過程閃退以及無法使用 Transform 節點, 因此可以換為 </span><a href="http://229.cycu.org/Webots_2023b.7z">Webots_2023b.7z</a><span><span> </span>版.</span></p>
<p style="padding-left: 30px;">7. 已知如何更新個人與協同分組的倉儲, 以便套用所分配的 <a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 位址</a>啟動網際協同流程:</p>
<p style="padding-left: 60px;"><span>已知 w4 之前的學員作業倉儲版本, 無法在 IPv6 位址設定時正確運作, 各學員必須下載 </span><a href="http://229.cycu.org/cmsimde_w4.7z">cmsimde_w4.7z</a><span>, 解開壓縮檔案後, 替換倉儲中的 cmsimde 目錄.</span></p>
<p style="padding-left: 60px;"><span>更改 init.py 中將 ip 設為所分配的 <a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 address</a>.</span></p>
<p style="padding-left: 30px;">8. 已知投籃機的零組件可以透過 Solvespace 與 Onshape 繪製, 其中前者簡便而後者有利於協同.</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a> (joint4 設於 base 然後利用 SolidReference 指向 link3)</p>
<p style="padding-left: 30px;">9. 已知如何利用 Solid - Shape - Box 或 Solid - CadShape 建立封閉式多連桿機構模擬, (若希望直接更改零組件顏色, 則可以使用 Solid - Shape - Mesh 進行多連桿機構進行組立:</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/downloads/fourbar_box.7z">fourbar_box.7z</a> (joint4 設於 base 右端, 然後利用 SolidReference 指向 link3)</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/downloads/fourbar_box_w8.7z">fourbar_box_w8.7z</a> (joint4 設於 link3 末端, 然後利用 SolidReference 指向 static_environment)</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/downloads/w10_2b_hw1_hw2_demo.7z">w10_2b_hw1_hw2_demo.7z</a> (直接使用 Solid - Shape - Mesh 比較方便直接利用 material 設定零件顏色)</p>
<p style="padding-left: 30px;">10. 已知可以透過 Solid - Shape - Mesh 中 material 的名稱, 以控制器程式改變顏色, 進而製作出七段顯示模擬器:</p>
<p style="padding-left: 60px;"><span> </span><a href="https://mde.tw/cd2025/downloads/7_segment_display.7z">7_segment_display.7z</a> (利用按鍵改變零件顏色)</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/downloads/score_counter.7z">score_counter.7z</a> (三個位數的 7 段顯示器模擬)</p>
<p style="padding-left: 30px;">11. 已知可以透過 boundingObject 中的 Mesh 設定, 讓封閉連桿執行投籃動作, 且經由紅外線距離感測紀錄是否得分:</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/downloads/basketball_game_demo.7z">basketball_game_demo.7z</a></p>
<p style="padding-left: 30px;">12. 接下來若要利用各組員所分配的 <a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 位址</a>配置一台具備 https 連線用的網際協同伺服器, 建議使用 Virtualbox 或 <a href="https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion">VMWare Workstation</a> 加上 Nginx, Stunnel 或直接採 cmsimde 進行設定.</p>
<p style="padding-left: 60px;"><a href="http://229.cycu.org/win10.vdi">win10.vdi</a> (Virtualbox 的 Windows 10 虛擬主機檔案)</p>
<p style="padding-left: 60px;">利用 <a href="http://229.cycu.org/certbot.7z">certbot.7z</a> 取得與符號名稱對應的 privkey.pem 以及 fullchain.pem</p>
<p style="padding-left: 90px;">安裝 certbot 之後, 在管理者命令列視窗中執行 <span style="background-color: #ccffcc;">certbot certonly --standalone</span> 給定符號名稱後, 可以取得 privkey.pem 與 fullchain.pem, 改名為 key.pem 與 cert.pem 後放入倉儲根目錄取代原有的 *.pem (可以將原 self-signed certificates 改名). 之後再啟動 cms 即可使用 <a href="https://a**.mde.nfu.edu.twport">https://a**.mde.nfu.edu.tw:port</a> 或 <a href="https://b**.mde.nfu.edu.twport">https://b**.mde.nfu.edu.tw:port</a> 連線.</p>
<p style="padding-left: 30px;">13. 投籃機與籃框的移動裝置則可採用 <a href="https://www.cyberbotics.com/doc/guide/youbot?version=cyberbotics:R2019a-rev1#!">Kuka 套件項下</a>的 <a href="https://mde.tw/cd2025/content/Youbot_cart.html">Youbot</a> <a href="https://en.wikipedia.org/wiki/Mecanum_wheel">Mecanum</a> 輪底座.</p>
<p style="padding-left: 60px;"><a href="https://mde.tw/cd2025/content/Youbot_cart.html">https://mde.tw/cd2025/content/Youbot_cart.html</a> </p>
<p style="padding-left: 60px;"><a href="/downloads/youbot_cart_w10.7z">youbot_cart_w10.7z</a> (利用鍵盤方向鍵控制平台行進)</p>
<p style="padding-left: 30px;">14. (參考) 對於 webotsw --stream 在近端啟動伺服器的部分尚未完成, 目前僅能透過官方網站擷取 Webotsview.js, 具體問題在於 webots 串流伺服器啟動後, 不接受跨網域擷取 Webotsview.js, 亦即必須處理伺服器間的 Access-Control-Allow-Origin（CORS）議題. 自行 <a href="https://github.com/cyberbotics/webots/wiki/Windows-installation/">build webotsw.exe</a> 應該就可以克服此一問題.</p>
<p style="padding-left: 30px;">15. (參考) 另外 Webots stream server 目前僅接受多 client 檢視, 而不支援跨 server 執行 controller 指令, 若要在系統模擬架構下進行多人同步協同 (類似 CoppeliaSim 的串流控制), 則必須自行處理.</p>
<p style="padding-left: 30px;"><span>16. </span><a href="/downloads/hw1_w11.7z">hw1_w11.7z</a><span> (將 hw1 的 box 連桿設為透明, 位置疊上 solvespace 所繪製的零件)</span></p>
<hr/>
<p>針對上面 task 15. 可以透過 Websocket 建立一個伺服器, 然後有配合協同的另外一台電腦啟動 client 程式, 利用鍵盤方向鍵進行控制, 此時必須將 cart 的 controller 設為 extern.</p>
<p>執行之前必須將 server 與 client 程式改用各自所分配的 IPv6 網路位址:</p>
<p><a href="/downloads/youbot_cart_w10_websocket.7z">youbot_cart_w10_websocket.7z</a> (執行後, server 與 client 都可以利用方向鍵控制 cart)</p>
<p>備註: 上列模擬場景, 若在同一台電腦上可以利用 <a href="http://229.cycu.org/win10.vdi">win10.vdi</a><span><span> </span>(Virtualbox 的 Windows 10 虛擬主機檔案) 設定各自所分配的 <a href="https://mde.tw/cd2025/content/IPv6.html">IPv6 位址</a>進行測試. 也可以在同組組員之間進行測試.</span></p>
<p><span>執行之前, 必須將 Webots 內建的動態連結程式庫納入可攜 Python: set PYTHONPATH=%Disk%:\Python313\DLLs;%Disk%:\Python313\Lib;%Disk%:\Python313\Lib\site-packages;%Disk%:\NX\NXBIN\python;%Disk%:\Webots_2023b\msys64\mingw64\bin;%Disk%:\Webots_2023b\lib\controller\python;</span></p>
<p><span>啟動順序: 先 Run simulation, 執行 server, 然後再執行 client 後進行控制.</span></p>
<p><span>17. w13 利用 supervisor 模式, 希望當投球機投出球後, 無論得分與否, 只要投球機構回復原始投球姿態後, controller 將會自動在原球位置產生另一顆球, proof of concept 如 <a href="/downloads/w13_random_sphere.7z">w13_random_sphere.7z</a> 所示.</span></p>
<p><span><a href="https://cyberbotics.com/doc/reference/robot?tab-language=python">Robot</a> 與 <a href="https://cyberbotics.com/doc/reference/supervisor?tab-language=python">Supervisor</a> 節點的結合應用: <a href="/downloads/basketball_game_w13.7z">basketball_game_w13.7z</a></span></p>
<p><span>18. 當投籃系統中籃框採亂數左右移動時, 可以透過影像辨識追蹤籃框位置與距離: <a href="/downloads/webots-example-visual-tracking.7z">webots-example-visual-tracking.7z</a></span></p>
<hr/>
<p><a href="/downloads/w10_2b_hw1_hw2_demo.7z">w10_2b_hw1_hw2_demo.7z</a></p>
<p>以下模擬將 joint4 定在 link3 末端, 然後透過 SolidReference 指定為 &lt;static environment&gt;, 表示此 joint4 必須固定在地面.</p>
<p>與 <a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a> 在引用 obj 格式零件上的差異在於: 使用 Solid - Shape - Mesh 節點導入的 CAD 繪製零件, 無需如 Solid - CadShape 必須透過 .mtl 修改導入零件的顏色, Shape 節點可以直接置入 Material 欄位, 透過 diffuseColor 改變零件顏色.</p>
<p><img alt="" height="326" src="/images/w10_2b_joint4_on_link3.png" width="400"/></p>
<p>有關 CadShape:</p>
<p>The <a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/cadshape#cadshape">CadShape</a> node renders a Collada (.dae) or Wavefront (.obj) object imported from an external file. <span style="background-color: #ccffcc;">Both Collada and Wavefront files can include 3D geometries and appearances, be it materials or references to external textures, therefore the <a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/cadshape#cadshape" style="background-color: #ccffcc;">CadShape</a> node builds both</span>. If the file references external textures, these should be placed relative to the collada/wavefront file itself as indicated (i.e., in the location expressed within the .dae/.obj file), no additional search is performed for these textures.</p>
<p>假如希望導入的零件使用外部的材質檔案進行調控, 可以使用 CadShape 節點, 以 .dae 或 .obj 導入.</p>
<p>有關 Mesh:</p>
<p>The <a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/mesh#mesh">Mesh</a> node represents a 3D shape imported from an external file created by a 3D modeling software. <span style="background-color: #ccffcc;">The <a class="dynamicAnchor" href="https://cyberbotics.com/doc/reference/mesh#mesh" style="background-color: #ccffcc;">Mesh</a> node can be used either as a graphical or as a collision detection primitive (in a boundingObject)</span>. Currently, the following formats are supported:</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/COLLADA" target="_blank">Collada</a> files (.dae).</li>
<li><a href="https://en.wikipedia.org/wiki/STL_(file_format)" target="_blank">STL</a> files (.stl).</li>
<li><a href="https://wiki.fileformat.com/3d/obj" target="_blank">Wavefront</a> files (.obj).</li>
</ul>
<p>If the file contains more than one mesh, the meshes will be merged into a single one.</p>
<p>Mesh 可以接受 .dae、stl 或 .obj 檔案格式零件, 且可用於零件外形與碰撞檢測用 (CadShape 節點則只能用於零件外形展示, 而不能用於碰撞檢測).</p><h3>Closing</h3>
<p>在 Webots <a href="https://cyberbotics.com/doc/reference/supervisor?tab-language=python">supervisor</a> 模式下建立 sphere (利用監控模式建立節點):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個函數，用於創建球的節點
def create_sphere(supervisor, position):
    def_name = generate_valid_def_name()  # 獲取唯一的 DEF 名稱
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {position[0]} {position[1]} {position[2]}  # 設置球的初始位置
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}  # 設置球的半徑
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor 1 0 0  # 設置球的顏色為紅色
            }}
          }}
        }}
      ]
      physics Physics {{
        mass 0.1  # 設置球的質量
      }}
      boundingObject Sphere {{
        radius {sphere_radius}  # 設置碰撞邊界為球形
      }}
    }}
    """
    root = supervisor.getRoot()  # 獲取模擬場景的根節點
    children_field = root.getField("children")  # 獲取根節點的子節點字段
    children_field.importMFNodeFromString(-1, sphere_string)  # 將新創建的球節點加入模擬
    return def_name  # 返回球的 DEF 名稱</pre>
<p>在 <a href="https://cyberbotics.com/doc/reference/supervisor?tab-language=python">supervisor</a> 模式移除節點 (<a href="https://cyberbotics.com/doc/reference/supervisor#wb_supervisor_node_remove">remove node</a>):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個函數，用於移除球的節點
def remove_object(node):
    node.remove()  # 調用 Webots 的 remove 方法移除節點</pre>
<p></p><h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%):<span> </span><span>建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>請將個人根據<span> </span><a href="https://mde.tw/cd2025/content/Stage1.html">https://mde.tw/cd2025/content/Stage1.html</a><span> </span>導引內容的<span>練習、以及製作 HW1 的過程</span>拍攝成帶有說明字幕的影片, 根據下列影片標題上傳至 Youtube 後在指定時段內回傳至指定表單. 並在個人作業倉儲中以 HW1 頁面紀錄相關過程與心得.</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<hr/>
<p>這個作業至少有兩種 closed chain 的設定方法, 其一是將 joint4 設於 base link 然後在 joint4 的 endPoint 以 cadReference 參照到 link3, 意即 joint4 雖然位於 base link, 同時也要求其位於 link3. 設定完成必須僅保留一個主動 device, 然後個轉動 links 都必須設定 boundingObject 與 physics 欄位內容, 才能進行 dynamic closed chain 的聯立運算.</p>
<p>第二種 closed chain 設定方法也可以將 joint4 設於 link3 然後在 joint4 的 endPoint, 以 cadReferce 參照到內定的 &lt;static reference&gt;, 表示 joint4 除了必須在 link3 端點之外, 同時必須固定在"地面", 但卻不可將其 cadReference 參照到 base link.</p>
<hr/>
<p>以下將利用 box 幾何外形節點建立平面四連桿機構的模擬場景, 要求地面固定桿長度 1m, 寬高各為 0.1m, 第一桿長度 0.4m, 第二桿長度 0.6m, 第三桿長度 0.9m.</p>
<p><span style="background-color: #00ff00;">Step1:</span> 在可攜程式套件中開啟 Webots, 也就是在 cmd 視窗中輸入 webotsw 就可以開啟套件, 但安裝 Windows 的電腦必須符合<a href="https://cyberbotics.com/doc/guide/system-requirements">硬體規格的要求</a>.</p>
<p><span style="background-color: #00ff00;">Step2:</span> Webots 啟動後, 可以利用下拉式功能表 File - New - New Project Directory, 選擇 Y:\tmp\hw1 作為專案目錄, 建立 hw1.wbt, 其中因為不需要設置地板, 因此 Add a rectangle arena 選項可以不用勾選.</p>
<p><span style="background-color: #00ff00;">Step3:</span> 若模擬已經開始, 請按下 Pause the simulation 或透過 Ctrl + 0 暫停模擬, 並且利用 Reset simulation 或透過 Ctrl + Shift + t 讓模擬時間回到 t=0, 之後完成階段設定後, 必須讓模擬時間回到 t=0 之後才進行 hw1.wbt 的存檔.</p>
<p><span style="background-color: #00ff00;">Step4:</span> 確定 t=0 後, 按下 Save the current world file 或透過 Ctrl + Shift +s 儲存正在建立的 world 檔案, 之後利用 SciTE 開啟 Y:\tmp\hw1\worlds\hw1.wbt, 檔案內容如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#VRML_SIM R2025a utf8

EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/backgrounds/protos/TexturedBackground.proto"
EXTERNPROTO "https://raw.githubusercontent.com/cyberbotics/webots/R2025a/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto"

WorldInfo {
}
Viewpoint {
  orientation -0.5773502691896257 0.5773502691896257 0.5773502691896257 2.0944
  position 0 0 10
}
TexturedBackground {
}
TexturedBackgroundLight {
}
</pre>
<p>其中第一行表示此 .wbt 採用 R2025a 所建立, 其格式為 VRML_SIM 模擬語法, 且檔案採用 utf8 編碼.</p>
<p>之後則從官方網站取得 TexturedBackground.proto 與 TexturedBackgroundLight.proto 原型節點, 並宣告 Viewpoint 所在的點座標以及方位.</p>
<p><span style="background-color: #00ff00;">Step5:</span> 利用 Add a new object or import an object (or Ctrl + Shift + a) 從 Base nodes 類別中, 選擇建立一個 Robot 節點. 這時假如確定 t=0 按下儲存 hw1.wbt, 則模擬場景將在上述檔案中加上:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Robot {
}</pre>
<p><span style="background-color: #00ff00;">Step6:</span> 由於先前在執行 <a href="https://cyberbotics.com/doc/guide/tutorial-2-modification-of-the-environment">Tutorial2</a> 時, 已經知道要建立一個簡單的剛體, 如下圖所示, 必須先建立 Solid 節點, 然後再依序建立運動模擬用的 Shape、碰撞檢測用的 boundingObject 以及物理特性參數.</p>
<p><img caption="false" height="330" src="/images/simplest_rigit_body_object.png" width="400"/></p>
<p>因此在 Robot 節點下的 children 先建立一個 Solid 節點, 且命名 (DEF) 為 base, 此 Solid 的 name 欄位也設為 base,  而此節點就是用來模擬長度 1m, 寬高各為 0.1m 的固定連桿 (base). 並在 Solid 節點下的 children 建立一個 Shape, 且將此 Shape 命名為 base_shape. 之後將 base_shape 下的 geometry 節點中加入 box 節點.</p>
<p>此時內建的視圖為 Top View, 但並未顯示出全域座標系統, 可以利用 View - Optional Rendering - Show coordinate system 列出座標系統, 透過上視圖可以發現, x 座標向右為正, 而 y 座標則向上為正. 為了取得長 1m 的固定桿外形, 因此在上述 box x 方向欄位從內定的 0.1m 改為 1m, 即完成固定桿幾何外形的設定.</p>
<p>接著確定 t=0 的狀態下儲存檔案, hw1.wbt 的 Robot 場景內容如下:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Robot {
  children [
    DEF base Solid {
      children [
        DEF base_shape Shape {
          geometry Box {
            size 1 0.1 0.1
          }
        }
      ]
      name "base"
    }
  ]
}</pre>
<p>從上列 hw1.wbt 可以發現除了 children 節點欄位使用 [] 外其餘欄位均以 {} 界定, 其差別為 [] 類似數列, 可以納入多個相同節點物件, 而採 {} 界定的欄位內則各參數設定並不會重複. (AI 詢問提詞: webots 中 .wbt [] 與 {} 有何差別?)</p>
<p>由於在定義 Shape 節點時已經將其 DEF 為 base_shape (DEF 為 Define 定義的意思), 之後可以在設定 boundingObject 碰撞檢測用的 geometry, 利用 USE 重用此一個 Shape 節點外形. 設定完成後 hw1.wbt 成為:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Robot {
  children [
    DEF base Solid {
      children [
        DEF base_shape Shape {
          geometry Box {
            size 1 0.1 0.1
          }
        }
      ]
      name "base"
      boundingObject USE base_shape
    }
  ]
}
</pre>
<p><span style="background-color: #00ff00;">Step7:</span> 由於 base 物件為 static, 也就是設定為不會移動的物體, 因此無需設定密度與質量等 physics 物理特性. 但在 base 物件上總共會設定兩個旋轉軸, 其一為主動軸 joint1 與被動軸 joint4.</p>
<p>在 Webots 機電模型上, 物體上的轉動軸、移動軸或球接軸都必須與配置其上的物體在相同位階 (與 CoppeliaSim joint 設為子階的作法不同).</p>
<p>因此在建立 joint1 時, 可以將滑鼠停在 base Solid 節點上, 然後新增一個 HingeJoint, DEF 為 joint1. 之後再新增一個 HingeJoint, DEF 為 joint4.</p>
<p><span style="background-color: #00ff00;">Step8:</span> 點開 DEF joint1 HingeJoint 節點後, 其下有兩個用藍色圓形 icon 代表的"節點", 以及一個用棕色方形 icon 代表的"欄位".</p>
<p>HingeJoint 其下的兩個節點名稱分別為 jointParameters 以及 endPoint, 初始對應物件都是 NULL, 代表沒有設定. 而欄位的名稱為 device, 可以加入煞車 (brake)、感測器 (sensor) 或致動器 (actuator) 等裝置.</p>
<p>首先雙點擊 jointParameters 節點, 以便加入節點參數, 其中包括指定 joint1 的 axis 向量以及旋轉中心座標 (即 anchor).</p>
<p>接著雙點擊 device 欄位, 以便加入 RotationalMotor, 且將其 name 設定為 motor1.</p>
<p>最後可以透過雙點擊 endPoint 欄位 (, 準備加入接在 joint1 上的 link1, 但是考量到設計標的中的 link1 是以 base 左端點座標旋轉, 但並非以該 link1 的中心點旋轉, 而是以 link1 的連桿端點旋轉, 因此當在 endPoint 建立 link1 所需的 Solid 節點之後, 除了 endPoint 所在的座標系統外 (該系統原點為 link1 的中心點), link1 還需要進行座標移動才能達成標的中的 link1 位置.</p>
<p>所以在 endPoint 從 NULL 改設定為 Solid 之後, 再接著建立 link1 所需的 Shape 節點之前, 必須先建立 <a href="https://cyberbotics.com/doc/reference/pose">Pose</a> 節點, 以便在 link1 中心移動到 base 物件左邊端點之後, 再利用其 parent 節點 <a href="https://cyberbotics.com/doc/reference/pose">Pose</a> 進行物件移動.</p>
<p>所以操作步驟如下:</p>
<p>雙點擊 endPoint 節點, 建立一個 Solid 節點 (因為準備將 link1 剛體接在 joint1 的旋轉端點上), DEF 設為 link1, 並在 Solid 的 children 節點上, 先建立一個 <a href="https://cyberbotics.com/doc/reference/pose">Pose</a> 節點, 然後在 <a href="https://cyberbotics.com/doc/reference/pose">Pose</a> 節點的 children 上再建立屬於 link1 的 Shape 節點. 並將此 Shape 節點 DEF 為 link1_shape 後, 於 geometry 節點處加入 box 節點.</p>
<p>此時需要在場景中 show 出系統的座標系統, 以便用來設定 box 的尺寸, 因此透過下拉式功能表 View - Optional Rendering - Show Coordinate System 顯示出系統的座標系統.</p>
<p>將 link1 的 Shape 幾何外形 box 尺寸設為 (0.4, 0.1, 0.1), 也就是 x 方向長度 0.4m, y 與 z 方向長度為 0.1m</p>
<p>接著雙點擊 geometry Box 上方的 apperance 節點, 加入一個 Apperance 節點, 也就是所謂的物件外觀節點, 並在外觀節點的 apperance 節點上加入一個 Apperance 節點, 並在 material 節點加入 Material 節點. 如此便可以利用 Material 節點中的 diffuseColor 欄位設定 RGB 欄位中的顏色比例值. 最後請將 link1 外觀顏色設為紅色 (RGB: 1.0, 0, 0)</p>
<p><span style="background-color: #00ff00;">Step9:</span> 從下列場景的樹狀結構, 可以發現 Robot、base 與 joint1 所依據的座標系統都相同, 且位於 base link 的中心點. 此時在 joint1 的 endPoint 欄位加入 link1 Solid 之後, 其座標原點也是位於 base link 的中心點, 由於 link1 必須移動至 base link 的左邊端點, 而 joint1 的旋轉中心點座標與旋轉向量, 則可以透過 jointParameters 中的 anchor 與 axis 欄位進行設定.</p>
<p><img alt="" height="505" src="/images/hw1_step9.png" width="346"/></p>
<p>控制程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard

def run_robot():
    # Create the Robot instance
    robot = Robot()
    
    # Get simulation time step
    timestep = int(robot.getBasicTimeStep())
    
    # 初始化鍵盤，並設定取樣時間為 timestep
    keyboard = Keyboard()
    keyboard.enable(timestep)

    # Get motor device
    motor = robot.getDevice('motor1')

    # Set motor for continuous rotation
    motor.setPosition(float('inf'))
    # 初始設定馬達速度為 0 (暫停狀態)
    motor.setVelocity(0.0)
    
    # 設定一個變數來追踪馬達是否在運行
    is_running = False
    
    print("模擬開始. 按下 's' 啟動馬達, 按下 'p' 暫停.")

    # Main control loop
    while robot.step(timestep) != -1:
        # 取得鍵盤輸入
        key = keyboard.getKey()
        
        # 將 key 轉換為對應的字符
        key_char = chr(key).lower() if key != -1 else ''
        
        # 使用字符直接比較
        if key_char == 's':
            is_running = True
            motor.setVelocity(1.0)
            print("馬達啟動")
            
        elif key_char == 'p':
            is_running = False
            motor.setVelocity(0.0)
            print("馬達暫停")

if __name__ == "__main__":
    run_robot()</pre>
<p><a href="/downloads/hw1.7z">hw1.7z</a></p>
<p><a href="/downloads/w6_2a_hw1.7z">w6_2a_hw1.7z</a> (課堂上 demo, base 連桿利用 material - Material - transparency 設為 1 隱藏, 其餘各 links 的 physics 與 boundingObject 均要具備, 且 joint4 的 anchor (旋轉中心點) 與 axis (旋轉軸向量) 也要指定)</p><h3>Tutorial1</h3>
<p><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots">https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots</a></p>
<h4 class="anchor-header" id="tutorial1yourfirstsimulationinwebots30minutes" name="tutorial-1-your-first-simulation-in-webots-30-minutes">Tutorial 1: Your First Simulation in Webots (30 Minutes)</h4>
<p>The objective of this first tutorial is to familiarize yourself with the user interface and with the basic concepts of Webots. You will create your first simulation containing a simple environment: an arena with floor and walls, a few boxes, an e-puck robot and a controller program that will make the robot move.</p>
<p>第一個教學導引的目的, 是讓使用者熟悉 Webots 的使用者介面與基本概念. 如下圖所示, 此導引所創建的模擬場景包含一個簡單的場景: 帶有地板與圍牆的競技場、幾個箱子、一個 e-puck 機器人和一個能控制機器人移動的程式.</p>
<figure name="what-you-should-see-at-the-end-of-the-first-tutorial"><img alt="tutorial_e-puck.png" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/tutorial_e-puck.thumbnail.jpg"/>
<figcaption class="anchor-header"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#what-you-should-see-at-the-end-of-the-first-tutorial"><span class="anchor-link-image"></span></a>What you should see at the end of the first tutorial.</figcaption>
</figure>
<h4 id="indexTitle">Index</h4>
<ul id="index">
<li><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#start-webots">Start Webots</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#create-a-new-world">Create a New World</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#add-an-e-puck-robot">Add an e-puck Robot</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#create-a-new-controller">Create a New Controller</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#extend-the-controller-to-speed-control">Extend the Controller to Speed Control</a></li>
<li><a href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#conclusion">Conclusion</a></li>
</ul>
<h4 class="anchor-header" id="startwebots" name="start-webots"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#start-webots"><span class="anchor-link-image"></span></a>Start Webots</h4>
<p>If not already done, download and install Webots, following these <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/installing-webots">installation instructions</a>.</p>
<blockquote>
<p><strong>Hands-on #1</strong>: <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/starting-webots">Start Webots</a> by double-clicking on its icon (or invoking it from a command line in a Terminal). If you are running Webots for the first time on this computer, you may be prompted to select a graphical theme. You may also be invited to follow the Webots guided tour, go ahead and close the guided tour.</p>
</blockquote>
<p>If you never saw it, please take some time to view the demos featured in the guided tour. They are telling a lot about the possibilities of Webots. The guided tour is also available from the <em>Help</em> menu of Webots.</p>
<h4 class="anchor-header" id="createanewworld" name="create-a-new-world"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#create-a-new-world"><span class="anchor-link-image"></span></a>Create a New World</h4>
<p>A <strong>World</strong> is a file containing information like where the objects are, what they look like, how they interact with each other, what is the color of the sky, and the definitions of gravity, friction, masses of the objects, etc. It defines the initial state of a simulation. The different objects are called <strong>Nodes</strong> and are organized hierarchically in a <strong>Scene Tree</strong>. Therefore, a node may contain sub-nodes. A world is stored in a file having the <code>.wbt</code> extension. The file format is derived from the <strong>VRML97</strong> language, and is human readable. The world files must be stored directly in a directory called <code>worlds</code>.</p>
<p>這裡所謂的 World 是一個文件檔案, 其中包含物件所在位置、外觀、以及如何與環境及其他物件進行相互作用、天空的顏色與重力、摩擦力、物件質量等資訊. 此外, 文件中還定義了模擬的初始狀態.</p>
<p>模擬場景中的各個物件稱為節點, 採樹狀架構排列. 其中的節點可以包含子節點. 模擬場景的檔案副檔名為 .wbt, 也就是 webots 中取 wbt 三個字母所組成. 該文件格式源自 VRML97 語言, 內容為明碼, 可以直接由文字編輯器讀取或編輯. 模擬場景檔案則規定必須儲存在名稱為 worlds 的目錄中.</p>
<blockquote>
<p><strong>Hands-on #2</strong>: Pause the current simulation by clicking on the <code>Pause</code> button <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/pause-button.png" width="26"/> of the 3D view (see the <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-user-interface#simulation-menu">user interface description</a> to find out the buttons). The simulation is paused if the virtual time counter on the main toolbar is stopped. Create a new project from the <strong>File / New / New Project Directory...</strong> menu item and follow the instructions:</p>
<ol>
<li>Name the project directory <code>my_first_simulation</code> instead of the proposed <code>my_project</code>.</li>
<li>Name the world file <code>my_first_simulation.wbt</code> instead of the proposed <code>empty.wbt</code>.</li>
<li>Click all the tick boxes, including the "Add a rectangle arena" which is not ticked by default.</li>
</ol>
</blockquote>
<p>Webots displays a list of directories and files it just created. This corresponds to the <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-standard-file-hierarchy-of-a-project">standard file hierarchy of a Webots project</a>. Click on the <code>Finish</code> (Windows, Linux) or <code>Done</code> (macOS) button to close this window.</p>
<p>Congratulations, you just created your very first Webots world! The 3D view should display a square arena with a checkered floor. You can move the viewpoint in the 3D view <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window#navigation-in-the-scene">using the mouse</a>: left button, right button and the wheel.</p>
<p>Webots nodes stored in world files are organized in a tree structure called the <strong>scene tree</strong>. The scene tree can be viewed in two sub-windows of the main window: the <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window">3D view</a> (at the center of the main window) is the 3D representation of the scene tree and the <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree">scene tree view</a> (on the left) is the hierarchical representation of the scene tree. The <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree">scene tree view</a> is where the nodes and fields can be modified. It should currently list the following nodes:</p>
<ul>
<li><a href="https://cyberbotics.com/doc/reference/worldinfo">WorldInfo</a>: contains global parameters of the simulation.</li>
<li><a href="https://cyberbotics.com/doc/reference/viewpoint">Viewpoint</a>: defines the main viewpoint camera parameters.</li>
<li><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/backgrounds/protos/TexturedBackground.proto" target="_blank">TexturedBackground</a>: defines the background of the scene (you should see mountains far away if you rotate a little bit the viewpoint)</li>
<li><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/backgrounds/protos/TexturedBackgroundLight.proto" target="_blank">TexturedBackgroundLight</a>: defines the light associated with the above background.</li>
<li><a href="https://webots.cloud/run?url=https://github.com/cyberbotics/webots/blob/released/projects/objects/floors/protos/RectangleArena.proto" target="_blank">RectangleArena</a>: define the only object you see so far in this scene.</li>
</ul>
<p>Each node has some customizable properties called <strong>Fields</strong>. Let's modify these fields to change the rectangle arena:</p>
<p>每一個節點都帶有可以自行設定的屬性稱為欄位.</p>
<blockquote>
<p><strong>Hands-on #3</strong>: Double-click on the <code>RectangleArena</code> node in the scene tree. This should open the node and display its fields. (雙點擊各節點可以帶出其特定的欄位)</p>
<ol>
<li>Select the <code>floorTileSize</code> field and set its value to <code>0.25 0.25</code> instead of <code>0.5 0.5</code>. You should see the effect immediately in the 3D view.</li>
<li>Select the <code>wallHeight</code> field and change its value to <code>0.05</code> instead of <code>0.1</code>. The wall of the arena should now be lower.</li>
</ol>
</blockquote>
<p>In the <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-scene-tree">scene tree view</a>, the fields are displayed in a different color (depending on the theme) if they differ from their default values. Now, we would like to add some objects:</p>
<p>當欄位值與其內定值不同時, 將以不同的顏色進行標示.</p>
<p>按下 shift+滑鼠左鍵, 可以移動物件.</p>
<p>選擇物件後, 可以用 Ctrl + C 複製該物件, 然後以 Ctrl + V 貼上該複製的物件, 然後再利用 Ctrl + 滑鼠左鍵移動物件.</p>
<p>選擇物件後, 出現位於物件中心點的座標向量與旋轉標示, 可以用滑鼠點選後可以利用向量進行單一方向的移動或利用旋轉標示旋轉物件.</p>
<blockquote>
<p><strong>Hands-on #4</strong>: Double-click on the <code>RectangleArena</code> in the scene tree to close it and select it. Click on the <code>Add</code> button <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/add-button.png" width="26"/> at the top of the scene tree. In the open dialog box, choose <code>PROTO nodes (Webots Projects) / objects / factory / containers / WoodenBox (Solid)</code>. A big box should appear in the middle of the arena. Double-click on it in the scene tree to open its fields.</p>
<ol>
<li>Change its <code>size</code> to <code>0.1 0.1 0.1</code> instead of <code>0.6 0.6 0.6</code>.</li>
<li>Change its <code>translation</code> to <code>0 0 0.05</code> instead of <code>0 0 0.3</code>. Alternatively, you may use the blue arrow that appears in the 3D view to adjust its <code>translation.z</code> field.</li>
<li>Now shift-click and drag the box in the 3D view and move it in some corner of the arena.</li>
<li>Select the box and press <kbd>ctrl</kbd>-<kbd>C</kbd>, <kbd>ctrl</kbd>-<kbd>V</kbd> (Windows, Linux) or <kbd>⌘ command</kbd>-<kbd>C</kbd>, <kbd>⌘ command</kbd>-<kbd>V</kbd> (macOS) to copy and paste it. Shift-click and drag the new box to move it at some different location. Create a third box this way.</li>
<li>Move the boxes, so that no box is at the center of the arena. You may also use the blue rotation arrows to rotate the boxes along the vertical axis. This can be done also by shift-click and drag with the right mouse button. Alternatively, you can change the angle of the <code>rotation</code> field of the <code>WoodenBox</code> nodes in the scene tree.</li>
<li>Once you are satisfied with the result, save the world using the save button.</li>
</ol>
</blockquote>
<p>Using the translation and rotation handles to move objects is explained in <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window#axis-aligned-handles">this section</a>.</p>
<h4 class="anchor-header" id="addanepuckrobot" name="add-an-e-puck-robot"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#add-an-e-puck-robot"><span class="anchor-link-image"></span></a>Add an e-puck Robot</h4>
<p>The e-puck is a small robot having differential wheels, 10 <a href="https://cyberbotics.com/doc/reference/led">LEDs</a>, and several sensors including 8 <a href="https://cyberbotics.com/doc/reference/distancesensor">DistanceSensors</a> and a <a href="https://cyberbotics.com/doc/reference/camera">Camera</a>. In this tutorial we are only interested in using its wheels. We will learn how to use other capabilities in the next tutorials.</p>
<p>Now, we are going to add an e-puck model to the world. Make sure that the simulation is paused and that the virtual time elapsed is 0. If this is not the case, reset the simulation with the <code>Reset</code> button <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/reset-simulation-button.png" width="26"/>.</p>
<p>When a Webots world is modified with the intention of being saved, it is fundamental that the simulation is first paused and reloaded to its initial state, i.e. the virtual time counter on the main toolbar should show 0:00:00:000. Otherwise at each save, the position of each 3D object can accumulate errors. Therefore, any modification of the world should be performed in that order: <strong>pause, reset, modify and save the simulation</strong>.</p>
<p>We don't need to create the e-puck robot from scratch, we will just have to import a <code>E-puck</code> node. This node is actually a <a href="https://cyberbotics.com/doc/reference/proto">PROTO</a> node, like the <code>RectangleArena</code> or the <code>WoodenBox</code> we introduced before. Prototyping allows you to create custom objects and to reuse them.</p>
<blockquote>
<p><strong>Hands-on #5</strong>: Select the last node <code>WoodenBox</code> of the scene tree view. Click on the <code>Add</code> button <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/add-button.png" width="26"/> at the top of the scene tree view. In the dialog box, choose <code>PROTO nodes (Webots Projects) / robots / gctronic / e-puck / E-puck (Robot)</code>. An e-puck robot should appear in the middle of the arena. Move and rotate this robot, the same way you did it with the boxes. Save the simulation and press the <code>Run real-time</code> button <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/realtime-button.png" width="26"/>.</p>
</blockquote>
<p>The robot should move, blink LEDs and avoid obstacles. That's because it has a default controller with that behavior. You may have noticed a small black window appearing in the upper-left corner of the 3D view. It shows the image taken by the <a href="https://cyberbotics.com/doc/reference/camera">Camera</a> of the e-puck robot. This image will remain black until the camera is explicitly enabled by the controller of the robot. This small image window can be <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window#moving-and-resizing-overlays">moved</a> around by dragging it. It can also be <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window#moving-and-resizing-overlays">resized</a> by dragging the bottom-right corner. Finally, it can be closed by clicking the "x" in the top-right corner. You can make it visible again from the <strong>Overlays</strong> menu, by selecting it in the <strong>Camera Devices</strong> submenu. Because we won't need it, you can actually close it.</p>
<p>Now, while the simulation is running, let's play with the physics:</p>
<blockquote>
<p><strong>Hands-on #6</strong>: <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/the-3d-window#applying-a-force-to-a-solid-object-with-physics">Apply a force</a> to the robot by pressing <kbd>alt</kbd> <em>+ left-click + drag</em> (use the <kbd>⌥ option</kbd> key on some Mac keyboards). On Linux, you should also press the <kbd>ctrl</kbd> key in addition to <kbd>alt</kbd> <em>+ left-click + drag</em>. It is not possible to apply a force to a <code>WoodenBox</code> node, because by default, they have no mass and are considered as glued on the floor. To enable physics on the <code>WoodenBox</code> nodes, you should set their <code>mass</code> field to a certain value (for example 0.2 kg). Once this is done, should be able to apply a force on them as well.</p>
</blockquote>
<p>The simulation may be paused <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/pause-button.png" width="26"/>, run step-by-step <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/step-button.png" width="26"/>, in real time <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/realtime-button.png" width="26"/> or in fast <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/fast-button.png" width="26"/> modes.</p>
<p>Now we are going to modify the world and decrease the step of the physics simulation: this will increase the accuracy and stability of the simulation (but reduce the maximum simulation speed).</p>
<blockquote>
<p><strong>Hands-on #7</strong>: Pause the simulation and revert it. In the Scene Tree view, expand the <a href="https://cyberbotics.com/doc/reference/worldinfo">WorldInfo</a> node (the first node). Set its <code>basicTimeStep</code> field to <em>16</em>. Then save the simulation.</p>
</blockquote>
<h4 class="anchor-header" id="createanewcontroller" name="create-a-new-controller"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#create-a-new-controller"><span class="anchor-link-image"></span></a>Create a New Controller</h4>
<p>We will now program a simple controller that will just make the robot move forwards.</p>
<p>A <strong>controller</strong> is a program that defines the behavior of a robot. Webots controllers can be written in the following programming languages: C, C++, Java, Python, MATLAB, etc. C, C++ and Java controllers need to be compiled before they can be run as robot controllers. Python and MATLAB controllers are interpreted languages so they will run without being compiled. In this tutorial, we are going to use C as a reference language but all the code snippets are also available in C++, Java, Python and MATLAB. Refer to the <a class="dynamicLoad" href="https://cyberbotics.com/doc/guide/language-setup">language chapter</a> to setup a controller using a different programming language.</p>
<p>The <code>controller</code> field of a <code>Robot</code> node specifies which controller is currently associated to the robot. Note that the same controller can be used by several robots, but a robot can only use one controller at a time. Each controller is executed in a separate child process usually spawned by Webots. Because they are independent processes, controllers don't share the same address space, and may run on different processor cores.</p>
<blockquote>
<p><strong>Hands-on #8</strong>: Create a new C (or any other language) controller called <code>epuck_go_forward</code> (for C++ and Java call it <code>EPuckGoForward</code> instead) using the <strong>File / New / New Robot Controller...</strong> menu item. This will create a new <code>epuck_go_forward</code> (or <code>EPuckGoForward</code>) directory in <code>my_first_simulation/controllers</code>. Select the option offering you to open the source file in the text editor.</p>
</blockquote>
<p>The new source file is displayed in Webots text editor window. This source file may be compiled (if written in C, C++ or Java) without any modification, however the current code has no real effect. We will now associate new <code>epuck_go_forward</code> (or <code>EPuckGoForward</code>) controller to the <code>E-puck</code> node.</p>
<div class="tab-component" tabid="1"></div>
<div class="tab-content" name="python" style="display: block;" tabid="1">
<blockquote>
<p><strong>Hands on #9</strong>: In the scene tree view, select the <code>controller</code> field of the <code>E-puck</code> node, then use the field editor at the bottom of the Scene Tree view: press the <code>Select...</code> button and then select <code>epuck_go_forward</code> in the list. Once the controller is associated with the robot, save the world. Modify the program by getting the motor devices (<code>leftMotor = robot.getDevice('left wheel motor')</code>), and by applying a motor command (<code>leftMotor.setPosition(10.0)</code>):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Motor

TIME_STEP = 64

# create the Robot instance.
robot = Robot()

# get the motor devices
leftMotor = robot.getDevice('left wheel motor')
rightMotor = robot.getDevice('right wheel motor')
# set the target position of the motors
leftMotor.setPosition(10.0)
rightMotor.setPosition(10.0)

while robot.step(TIME_STEP) != -1:
   pass
</pre>
<p>Save the modified source code (<code>File / Save Text File</code>), reset and run the simulation.</p>
</blockquote>
</div>
<p>If everything is fine, your robot should move forwards. The robot will move using its maximum speed for a while and then stop once the wheels have rotated of 10 radians.</p>
<p>In the <code>controllers</code> directory of your project, a directory containing the <code>epuck_go_forward</code> (or <code>EPuckGoForward</code>) controller has been created. The <code>epuck_go_forward</code> (or <code>EPuckGoForward</code>) directory contains a <code>epuck_go_forward</code> (or <code>EPuckGoForward</code>) binary file generated after the compilation of the controller (on Windows, this file has the <code>.exe</code> extension). The controller directory name should match with the binary name.</p>
<h4 class="anchor-header" id="extendthecontrollertospeedcontrol" name="extend-the-controller-to-speed-control"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#extend-the-controller-to-speed-control"><span class="anchor-link-image"></span></a>Extend the Controller to Speed Control</h4>
<p>The robots wheels are often controlled using velocity, and not position like we did in the previous example. In order to control the motors of the wheels in speed you need to set the target position to the infinity and to set the desired speed:</p>
<div class="tab-component" tabid="2"></div>
<div class="tab-content" name="c" style="display: block;" tabid="2">
<blockquote>
<p><strong>Hands-on #10</strong>: Modify the controller program as shown below, recompile it and run it:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Motor

TIME_STEP = 64

MAX_SPEED = 6.28

# create the Robot instance.
robot = Robot()

# get a handler to the motors and set target position to infinity (speed control)
leftMotor = robot.getDevice('left wheel motor')
rightMotor = robot.getDevice('right wheel motor')
leftMotor.setPosition(float('inf'))
rightMotor.setPosition(float('inf'))

# set up the motor speeds at 10% of the MAX_SPEED.
leftMotor.setVelocity(0.1 * MAX_SPEED)
rightMotor.setVelocity(0.1 * MAX_SPEED)

while robot.step(TIME_STEP) != -1:
   pass</pre>
</blockquote>
</div>
<p>The robot will now move (the wheels will rotate at a speed of 0.2 radian per second) and never stop. If nothing happens, don't forget to compile your code by selecting the <code>Build / Build</code> menu item or clicking on the gear icon <img alt="" height="26" src="https://raw.githubusercontent.com/cyberbotics/webots/released/docs/guide/images/build-button.png" width="26"/> above the code area. Compilation errors are displayed in red in the console. If there are any, fix them and retry to compile. Then, reload the world.</p>
<h4 class="anchor-header" id="conclusion" name="conclusion"><a class="anchor-link" href="https://cyberbotics.com/doc/guide/tutorial-1-your-first-simulation-in-webots?tab-language=python#conclusion"><span class="anchor-link-image"></span></a>Conclusion</h4>
<p>We hope you enjoyed creating your first Webots simulation. You have been able to set up a world, add a robot and program it. The important thing is that you learned the fundamental concepts summarized below:</p>
<ul>
<li>A world is made up of nodes organized in a tree structure.</li>
<li>A world is saved in a <code>.wbt</code> file stored in a Webots project.</li>
<li>The project also contains the robot controller programs which define the behavior of the robots.</li>
<li>Controllers may be written in C or other languages.</li>
<li>C, C++ and Java controllers have to be explicitly compiled before they can be executed.</li>
<li>Controllers are associated with robots via the <code>controller</code> fields of the <code>Robot</code> node.</li>
</ul>
<h2>HW2</h2>
<p>HW2 (5%): 建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</p>
<p>請將個人根據 <a href="https://mde.tw/cd2025/content/Stage2.html">https://mde.tw/cd2025/content/Stage2.html</a><span> </span>導引內容的<span>練習、以及製作 HW2 的過程</span>拍攝成帶有說明字幕的影片, 根據下列影片標題上傳至 Youtube 後在指定時段內回傳至指定表單. 並在個人作業倉儲中以 HW2 頁面紀錄相關過程與心得.</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<hr/>
<p>由於這個作業的所有零件, 在 CAD 組立時已經精確定位, 因此當轉為 obj 或 stl 時, 所有零件都以 CAD 組立時的原點作為相對參考座標.</p>
<p>若場景中的零件採用 Solid - <a href="https://cyberbotics.com/doc/reference/cadshape">cadShape</a> 則僅能參照 Collada (.dae) 或 Wavefront (.obj), 但若使用 Solid - Shape - Mesh, 則可以參照到 .obj 或 .stl 格式零件, 且不像 <a href="https://cyberbotics.com/doc/reference/cadshape">cadShape</a> 僅能使用外部的 .mtl 定義其零件的顏色或材質, Mesh 所參照的零件可以直接透過 <a href="https://www.cyberbotics.com/doc/reference/shape">Shape</a> 額外的 apperance 欄位直接在場景中定義材質與顏色.</p>
<p>至於 closed chain 中的設定與 HW1 相同, link4 可以設於 base link, 也可以設於 link3.</p><h2>HW3</h2>
<p>HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統</p>
<p>請將個人根據 <a href="https://mde.tw/cd2025/content/Stage3.html">https://mde.tw/cd2025/content/Stage3.html</a>  導引內容的<span>練習、以及製作 HW3 的過程</span>拍攝成帶有說明字幕的影片, 根據下列影片標題上傳至 Youtube 後在指定時段內回傳至指定表單. 並在個人作業倉儲中以 HW3 頁面紀錄相關過程與心得.</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): <span style="background-color: #ccffcc;">建立 Webots 基本物件模擬場景</span></p>
<p>請直接利用 Webots 中的 box 節點建立以下四連桿機構的運動模擬:</p>
<p><img caption="false" height="482" src="/images/cd2025_ex1-2.gif" width="400"/></p>
<p>其中紅色連桿為主動旋轉, 其旋轉速度設為 1.0 rad/s, 紅色連桿長度為 0.4m, 綠色連桿長度為 0.6m (短桿長度為 0.3m 基座位於長桿中央且與基座長桿重疊, ), 藍色連桿長度為 0.9m, 紅色連桿與藍色連桿距離則為 1m.</p>
<p>請學員將考試操作流程紀錄於作業網站中的 Exam1 頁面中, 並完成下列要求:</p>
<ol>
<li>請詳細說明各連桿的製作流程, 利用 Solvespace 繪製當紅色連桿旋轉角度為個人學號最後兩碼時 (單位為 degree) 的線架構圖, 並將此角度作為四連桿的起始旋轉角度.</li>
<li>完成後, 請以"<span><span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</span>" 作為操作影片標題, 上傳至 Youtube 後在指定時段內回傳至指定表單. 並在個人作業倉儲中以 Exam1 頁面紀錄相關過程與心得.</span></li>
</ol><h2>Exam2</h2>
<p>Exam2 (10%): <span style="background-color: #ccffcc;">利用 CAD 零組件建立模擬場景</span></p>
<p><span>請自行選擇 CAD 套件繪製下列平面四連桿機構, 之後將零件轉入 Webots 後建立以短桿轉速 1 rad/s 旋轉的動態模擬系統:</span></p>
<p><img alt="" height="282" src="/images/cd2025_exam2.png" width="400"/></p>
<p>其中左側最短桿為主動旋轉, 其旋轉速度設為 1.0 rad/s, 最短桿的長度, 請依照個人學號的最後兩碼作為依據, 設為 1.xx m, 其中 xx 為<span>人學號的最後兩碼, 其餘各桿長度與固定軸間的距離可自行訂定, 惟<span style="background-color: #ffff00;">主動桿的起始旋轉角度 angle, 也請以個人學號的最後兩碼作為依據, 單位為 degree</span>.</span></p>
<p>請學員將考試操作流程紀錄於作業網站中的 Exam2 頁面中, 並完成下列要求:</p>
<ol>
<li>請詳細說明各連桿的製作流程, 其中包括 CAD 繪製與 Webots 模擬場景的設定與操作流程.</li>
<li>完成後, 請以"<span><span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</span>" 作為操作影片標題, 上傳至 Youtube 後在指定時段內回傳至指定表單. 並在個人作業倉儲中以 Exam2 頁面紀錄相關過程與心得.</span></li>
</ol>
<p></p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<ol>
<li>請每位學員利用在 <a href="https://mde.tw/cd2025/content/IPv6.html">https://mde.tw/cd2025/content/IPv6.html</a> 中所分配的個人 IPv6 網址, 以 webotsw --stream 啟動個人所完成的 HW1 模擬系統. 並在其餘組員的電腦上, 以瀏覽器檢視啟動串流學員伺服器上的機構模擬. 完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube, 影片標題: <span>"</span><span><span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1 - 學員學號</span>".</span></li>
<li><span>請每位學員利用 <a href="https://mdecd2025.github.io/hw-scrum-1/downloads/three_digit_counter.7z">three_digit_counter.7z</a> 中的七段顯示器進行修改, 以 webotsw --stream 啟動後, 可在其餘組員的電腦中, 透過瀏覽器檢視參與協同組員 Webots 中所展示的<span style="background-color: #ccffcc;">學員學號</span>. 完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube, 影片標題: "<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 學員學號</span>".</span></li>
<li><span>請各組利用 <a href="https://mde.tw/cd2025/downloads/youbot_cart_w10_websocket.7z">youbot_cart_w10_websocket.7z</a> 中的 Youbot 底座平台, 由各組組長以 webotsw --stream 啟動後, 可在其餘組員的電腦中, 透過 Websocket 客戶端程式控制平台車的前進、後退與左右轉. 完成後請各學員將操作與設定說明過程拍成影片, 上傳至 Youtube, 影片標題: "<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 學員學號</span>".</span></li>
<li><span>上述機電模擬場景的協同設計, 請分別由各組組員將所完成的影片與心得整理在個人作業網站中的 Exam3 頁面後, 再逐一利用組員的帳號權限, 將個人心得與上述操作影片, 統一放入分組網站中的 Exam3 頁面中.</span></li>
</ol><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<hr/>
<p>截至目前, 已經從 <span><a href="/downloads/basketball_game_w13.7z">basketball_game_w13.7z</a></span> 得知如何利用平面四連桿機構進行投籃動作, 並在球通過籃框時註記得分, 也知道如何利用 supervisor 模式憑空產生球, 也能設法透過 supervisor 中的 emitter 將命令訊號送給 robot 中的 receiver.</p>
<p>其次, <a href="https://mde.tw/cd2025/downloads/score_counter.7z">score_counter.7z</a> 中利用物件的 material 顏色的改變, 建立了一個三位數的七段顯示器模擬.</p>
<p>而 <a href="https://mde.tw/cd2025/downloads/youbot_cart_w10.7z">youbot_cart_w10.7z</a> 提供一台可以利用鍵盤靈活操控的平台車. <a href="https://mde.tw/cd2025/downloads/youbot_cart_w12.7z">youbot_cart_w12.7z</a> 則驗證無論是在平台車上自行利用 box 或從 CAD 輸入同樣大小的零件, 可以取得相同的結果.</p>
<p>至於 <a href="https://mde.tw/cd2025/downloads/youbot_cart_w10_websocket.7z">youbot_cart_w10_websocket.7z</a> 則驗證儘管 Webots 本身並沒有提供如 CoppeliaSim 的 Websocket Remote API 模組, 設計者仍可自行利用 Websocket 架構, 編寫 client 與 server 應用程式, 在 Webots WWW 場景串流的模式下, 讓多人可以透過瀏覽器檢視伺服器中的場景, 並利用 Websocket client 端程式發送命令, 要求 Websocket server 端的協同程式控制 Webots 場景中的物件作動.</p>
<p>最後從 <a href="https://mde.tw/cd2025/content/Tutorial7.html">Tutorial7</a> 中得知, 要在協同產品設計流程中, 將前述各場景物件、感測器與控制程式整合成為一個能夠計時、計分且由兩位以上組員分別控制投籃動作以及籃框的移動, 最好的方式就是將各組成物件, 分別由協同組員設法建立為 <a href="https://cyberbotics.com/doc/reference/proto">PROTO</a> 物件之後, 再依各物件尺寸比例、座標系統方位、supervisor 監控、Websocket 遙控及各物件的控制程式進行協同分工後, 便可依循 <a href="/downloads/ballShooter.7z">ballShooter.7z</a> 中的射球機構 <a href="https://cyberbotics.com/doc/reference/proto">PROTO</a> 方式, 完成投籃遊戲系統場景的設置與模擬.</p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>